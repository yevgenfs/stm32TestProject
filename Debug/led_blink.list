
led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf0  08005bf0  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08005bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b18  20000104  08005cfc  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c1c  08005cfc  00024c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176dd  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039a5  00000000  00000000  00037811  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  0003c2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000046b7  00000000  00000000  0003d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012790  00000000  00000000  00041897  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc7e1  00000000  00000000  00054027  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004344  00000000  00000000  00120884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000104 	.word	0x20000104
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b40 	.word	0x08005b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000108 	.word	0x20000108
 80001cc:	08005b40 	.word	0x08005b40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fef0 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8b2 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f886 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  spinner_init();
 80004e4:	f000 fc8a 	bl	8000dfc <spinner_init>
  button_controler_init();
 80004e8:	f000 fa3e 	bl	8000968 <button_controler_init>
  io_configurate();
 80004ec:	f000 fa5a 	bl	80009a4 <io_configurate>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f002 fd34 	bl	8002f5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f4:	4a09      	ldr	r2, [pc, #36]	; (800051c <main+0x4c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x50>)
 80004fa:	f002 fd99 	bl	8003030 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <main+0x54>)
 8000502:	601a      	str	r2, [r3, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blink_task_entry, NULL, &blink_task_attributes);
 8000504:	4a08      	ldr	r2, [pc, #32]	; (8000528 <main+0x58>)
 8000506:	2100      	movs	r1, #0
 8000508:	4808      	ldr	r0, [pc, #32]	; (800052c <main+0x5c>)
 800050a:	f002 fd91 	bl	8003030 <osThreadNew>
 800050e:	4602      	mov	r2, r0
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x60>)
 8000512:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000514:	f002 fd56 	bl	8002fc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000518:	e7fe      	b.n	8000518 <main+0x48>
 800051a:	bf00      	nop
 800051c:	08005b88 	.word	0x08005b88
 8000520:	080006e1 	.word	0x080006e1
 8000524:	20004b8c 	.word	0x20004b8c
 8000528:	08005bac 	.word	0x08005bac
 800052c:	080006f1 	.word	0x080006f1
 8000530:	20004b90 	.word	0x20004b90

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f005 fa87 	bl	8005a56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xb4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xb4>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xb4>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <SystemClock_Config+0xb8>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1b      	ldr	r2, [pc, #108]	; (80005ec <SystemClock_Config+0xb8>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <SystemClock_Config+0xb8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f9fb 	bl	80019a0 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b0:	f000 f8ae 	bl	8000710 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fc56 	bl	8001e80 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005da:	f000 f899 	bl	8000710 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_USART2_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_USART2_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_USART2_UART_Init+0x4c>)
 80005fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_USART2_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_USART2_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_USART2_UART_Init+0x4c>)
 8000628:	f001 fdf6 	bl	8002218 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f86d 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20004b94 	.word	0x20004b94
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_GPIO_Init+0x94>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1d      	ldr	r2, [pc, #116]	; (80006d8 <MX_GPIO_Init+0x94>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_GPIO_Init+0x94>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_GPIO_Init+0x94>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_GPIO_Init+0x94>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_GPIO_Init+0x94>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0308 	and.w	r3, r3, #8
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RAD_LED_Pin|GREEN_LED_Pin|YELLOW_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	211e      	movs	r1, #30
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_GPIO_Init+0x98>)
 8000698:	f001 f94e 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RAD_LED_Pin GREEN_LED_Pin YELLOW_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RAD_LED_Pin|GREEN_LED_Pin|YELLOW_LED_Pin|BLUE_LED_Pin;
 800069c:	231e      	movs	r3, #30
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	480a      	ldr	r0, [pc, #40]	; (80006dc <MX_GPIO_Init+0x98>)
 80006b4:	f000 ffa6 	bl	8001604 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_GPIO_Init+0x98>)
 80006cc:	f000 ff9a 	bl	8001604 <HAL_GPIO_Init>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000

080006e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f002 fd47 	bl	800317c <osDelay>
 80006ee:	e7fb      	b.n	80006e8 <StartDefaultTask+0x8>

080006f0 <blink_task_entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_task_entry */
void blink_task_entry(void *argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_task_entry */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80006f8:	2102      	movs	r1, #2
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <blink_task_entry+0x1c>)
 80006fc:	f001 f935 	bl	800196a <HAL_GPIO_TogglePin>
    vTaskDelay(1000);
 8000700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000704:	f003 fcc2 	bl	800408c <vTaskDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000708:	e7f6      	b.n	80006f8 <blink_task_entry+0x8>
 800070a:	bf00      	nop
 800070c:	40020000 	.word	0x40020000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <HAL_UART_MspInit+0x94>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d133      	bne.n	80007fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_UART_MspInit+0x98>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <HAL_UART_MspInit+0x98>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_UART_MspInit+0x98>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_UART_MspInit+0x98>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <HAL_UART_MspInit+0x98>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_UART_MspInit+0x98>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007ca:	2360      	movs	r3, #96	; 0x60
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007da:	2307      	movs	r3, #7
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_UART_MspInit+0x9c>)
 80007e6:	f000 ff0d 	bl	8001604 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2026      	movs	r0, #38	; 0x26
 80007f0:	f000 feaf 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f4:	2026      	movs	r0, #38	; 0x26
 80007f6:	f000 fec8 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400
 8000808:	40023800 	.word	0x40023800
 800080c:	40020c00 	.word	0x40020c00

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000848:	f000 fd88 	bl	800135c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800084c:	f004 f888 	bl	8004960 <xTaskGetSchedulerState>
 8000850:	4603      	mov	r3, r0
 8000852:	2b01      	cmp	r3, #1
 8000854:	d001      	beq.n	800085a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000856:	f004 fe5f 	bl	8005518 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <USART2_IRQHandler+0x10>)
 8000866:	f001 fdbf 	bl	80023e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20004b94 	.word	0x20004b94

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f005 f89a 	bl	80059dc <__errno>
 80008a8:	4602      	mov	r2, r0
 80008aa:	230c      	movs	r3, #12
 80008ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20020000 	.word	0x20020000
 80008d4:	00000400 	.word	0x00000400
 80008d8:	20000120 	.word	0x20000120
 80008dc:	20004c20 	.word	0x20004c20

080008e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <SystemInit+0x28>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <SystemInit+0x28>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SystemInit+0x28>)
 80008f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fa:	609a      	str	r2, [r3, #8]
#endif
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <buttonEventsCb>:
#define BUTTON_TIMEOUT 100

static bool    is_button_pass_timeout = false;

void buttonEventsCb(button_event_t event)
{
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
    switch(event)
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d01c      	beq.n	8000956 <buttonEventsCb+0x4a>
 800091c:	2b02      	cmp	r3, #2
 800091e:	d016      	beq.n	800094e <buttonEventsCb+0x42>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d000      	beq.n	8000926 <buttonEventsCb+0x1a>

        case e_event_timeout:
            is_button_pass_timeout = true;
            break;
        default:
            break;
 8000924:	e01a      	b.n	800095c <buttonEventsCb+0x50>
            if(is_button_pass_timeout == true)
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <buttonEventsCb+0x58>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d015      	beq.n	800095a <buttonEventsCb+0x4e>
                set_spinner_period_ms(button_get_pressed_time() - button_get_timeout_with_debouncer());
 800092e:	f000 fb29 	bl	8000f84 <button_get_pressed_time>
 8000932:	4604      	mov	r4, r0
 8000934:	f000 fb1a 	bl	8000f6c <button_get_timeout_with_debouncer>
 8000938:	4603      	mov	r3, r0
 800093a:	1ae3      	subs	r3, r4, r3
 800093c:	4618      	mov	r0, r3
 800093e:	f000 faab 	bl	8000e98 <set_spinner_period_ms>
                button_pressed_time_reset();
 8000942:	f000 fb2b 	bl	8000f9c <button_pressed_time_reset>
                is_button_pass_timeout = false;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <buttonEventsCb+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
            break;
 800094c:	e005      	b.n	800095a <buttonEventsCb+0x4e>
            is_button_pass_timeout = true;
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <buttonEventsCb+0x58>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
            break;
 8000954:	e002      	b.n	800095c <buttonEventsCb+0x50>
            break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <buttonEventsCb+0x50>
            break;
 800095a:	bf00      	nop
    }
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	20000124 	.word	0x20000124

08000968 <button_controler_init>:

e_button_controler_err_t button_controler_init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    if(button_init() != e_button_err_ok)
 800096c:	f000 faaa 	bl	8000ec4 <button_init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <button_controler_init+0x12>
    {
        return e_button_controler_err_not_init;
 8000976:	2301      	movs	r3, #1
 8000978:	e010      	b.n	800099c <button_controler_init+0x34>
    }

    if(button_reg_callback(buttonEventsCb) != e_button_err_ok)
 800097a:	4809      	ldr	r0, [pc, #36]	; (80009a0 <button_controler_init+0x38>)
 800097c:	f000 fac4 	bl	8000f08 <button_reg_callback>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <button_controler_init+0x22>
    {
        return e_button_controler_err_not_init;
 8000986:	2301      	movs	r3, #1
 8000988:	e008      	b.n	800099c <button_controler_init+0x34>
    }

    if(button_set_timeout(BUTTON_TIMEOUT) != e_button_err_ok)
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f000 fad8 	bl	8000f40 <button_set_timeout>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <button_controler_init+0x32>
    {
        return e_button_controler_err_not_init;
 8000996:	2301      	movs	r3, #1
 8000998:	e000      	b.n	800099c <button_controler_init+0x34>
    }
    return e_button_controler_err_ok;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800090d 	.word	0x0800090d

080009a4 <io_configurate>:
                .convert_receive_package  = convert_receive_package,
        },
};

e_io_config_err_t io_configurate()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    return (io_generic_init(&protocol_config[0]) == e_io_generic_err_ok) ? e_io_config_err_ok
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <io_configurate+0x1c>)
 80009aa:	f000 f837 	bl	8000a1c <io_generic_init>
 80009ae:	4603      	mov	r3, r0
            : e_io_config_err_not_init;
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf14      	ite	ne
 80009b4:	2301      	movne	r3, #1
 80009b6:	2300      	moveq	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000004 	.word	0x20000004

080009c4 <io_genericEventsCb>:
volatile static uint8_t send_message[PACKAGE_LENGTH]    = {0};
volatile static uint8_t receive_message[PACKAGE_LENGTH] = {0};
volatile static receive_package_t receive_package = {0};

void io_genericEventsCb(e_io_generic_event_t event)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
    switch(event)
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <io_genericEventsCb+0x16>
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d006      	beq.n	80009e6 <io_genericEventsCb+0x22>
                set_spinner_period_ms(receive_package.receive_payload.period_ms);
            }
            break;

        default:
            break;
 80009d8:	e015      	b.n	8000a06 <io_genericEventsCb+0x42>
            objS_conf.receive_function(&receive_message, PACKAGE_LENGTH);
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <io_genericEventsCb+0x4c>)
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	21fe      	movs	r1, #254	; 0xfe
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <io_genericEventsCb+0x50>)
 80009e2:	4798      	blx	r3
            break;
 80009e4:	e00f      	b.n	8000a06 <io_genericEventsCb+0x42>
            objS_conf.convert_receive_package(&receive_message, PACKAGE_LENGTH, &receive_package);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <io_genericEventsCb+0x4c>)
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <io_genericEventsCb+0x54>)
 80009ec:	21fe      	movs	r1, #254	; 0xfe
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <io_genericEventsCb+0x50>)
 80009f0:	4798      	blx	r3
            if (receive_package.receive_payload.period_ms > 0)
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <io_genericEventsCb+0x54>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d004      	beq.n	8000a04 <io_genericEventsCb+0x40>
                set_spinner_period_ms(receive_package.receive_payload.period_ms);
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <io_genericEventsCb+0x54>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fa4a 	bl	8000e98 <set_spinner_period_ms>
            break;
 8000a04:	bf00      	nop
    }
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000128 	.word	0x20000128
 8000a14:	20000148 	.word	0x20000148
 8000a18:	20000248 	.word	0x20000248

08000a1c <io_generic_init>:

e_io_generic_err_t io_generic_init(io_generic_config_t* objPL_conf)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    if (objPL_conf == NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d101      	bne.n	8000a2e <io_generic_init+0x12>
    {
        return e_io_generic_err_not_init;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e057      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->init_function == NULL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <io_generic_init+0x1e>
    {
        return e_io_generic_err_not_init;
 8000a36:	2302      	movs	r3, #2
 8000a38:	e051      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->send_function == NULL)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d101      	bne.n	8000a46 <io_generic_init+0x2a>
    {
        return e_io_generic_err_not_init;
 8000a42:	2302      	movs	r3, #2
 8000a44:	e04b      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->run_function == NULL)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <io_generic_init+0x36>
    {
        return e_io_generic_err_not_init;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e045      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->receive_function == NULL)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <io_generic_init+0x42>
    {
        return e_io_generic_err_not_init;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	e03f      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->convert_message_for_send == NULL)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <io_generic_init+0x4e>
    {
        return e_io_generic_err_not_init;
 8000a66:	2302      	movs	r3, #2
 8000a68:	e039      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->convert_receive_package == NULL)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <io_generic_init+0x5a>
    {
        return e_io_generic_err_not_init;
 8000a72:	2302      	movs	r3, #2
 8000a74:	e033      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->reg_callback == NULL)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <io_generic_init+0x66>
    {
        return e_io_generic_err_not_init;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	e02d      	b.n	8000ade <io_generic_init+0xc2>
    }

    if (objPL_conf->unreg_callback == NULL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <io_generic_init+0x72>
    {
        return e_io_generic_err_not_init;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e027      	b.n	8000ade <io_generic_init+0xc2>
    }

    objS_conf.send_function            = objPL_conf->send_function;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <io_generic_init+0xcc>)
 8000a94:	6013      	str	r3, [r2, #0]
    objS_conf.receive_function         = objPL_conf->receive_function;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <io_generic_init+0xcc>)
 8000a9c:	6053      	str	r3, [r2, #4]
    objS_conf.run_function             = objPL_conf->run_function;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <io_generic_init+0xcc>)
 8000aa4:	6093      	str	r3, [r2, #8]
    objS_conf.init_function            = objPL_conf->init_function;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <io_generic_init+0xcc>)
 8000aac:	60d3      	str	r3, [r2, #12]
    objS_conf.convert_message_for_send = objPL_conf->convert_message_for_send;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <io_generic_init+0xcc>)
 8000ab4:	6153      	str	r3, [r2, #20]
    objS_conf.convert_receive_package  = objPL_conf->convert_receive_package;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <io_generic_init+0xcc>)
 8000abc:	6113      	str	r3, [r2, #16]
    objS_conf.reg_callback             = objPL_conf->reg_callback;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <io_generic_init+0xcc>)
 8000ac4:	6193      	str	r3, [r2, #24]
    objS_conf.unreg_callback           = objPL_conf->unreg_callback;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <io_generic_init+0xcc>)
 8000acc:	61d3      	str	r3, [r2, #28]

    objS_conf.init_function();
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <io_generic_init+0xcc>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	4798      	blx	r3
    objS_conf.reg_callback(io_genericEventsCb);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <io_generic_init+0xcc>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <io_generic_init+0xd0>)
 8000ada:	4798      	blx	r3
    return e_io_generic_err_ok;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000128 	.word	0x20000128
 8000aec:	080009c5 	.word	0x080009c5

08000af0 <io_i2c_init>:
 */

#include "lib/UL/io/io_i2c/io_i2c.h"

e_io_i2c_err_t io_i2c_init()
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
    return e_io_i2c_err_not_impemented;
 8000af4:	2304      	movs	r3, #4
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <send_to_i2c>:
{
    return e_io_i2c_err_not_impemented;
}

e_io_i2c_err_t send_to_i2c(led_num_t led_num, led_ctrl_t led_state)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
    return e_io_i2c_err_not_impemented;
 8000b10:	2304      	movs	r3, #4
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <io_i2c_run>:

e_io_i2c_err_t io_i2c_run(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
    return e_io_i2c_err_not_impemented;
 8000b22:	2304      	movs	r3, #4
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <convert_receive_package>:
#define SEND_MASSAGE_LENGHT 2

static send_package_t    send_package;

e_uart_package_convertor_err_t convert_receive_package(uint8_t *receive_message, uint8_t array_size, receive_package_t *receive_package)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b087      	sub	sp, #28
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	460b      	mov	r3, r1
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	72fb      	strb	r3, [r7, #11]
    if (receive_message != NULL)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d037      	beq.n	8000bb2 <convert_receive_package+0x84>
    {
        receive_package->receive_header.comand_id = receive_message[0];
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	781a      	ldrb	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	701a      	strb	r2, [r3, #0]
        receive_package->receive_header.length = receive_message[1];
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	785a      	ldrb	r2, [r3, #1]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	705a      	strb	r2, [r3, #1]
        receive_package->receive_payload.period_ms = 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
        for (int i = 2; i < receive_package->receive_header.length + 2 && i < array_size; i++)
 8000b58:	2302      	movs	r3, #2
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e01a      	b.n	8000b94 <convert_receive_package+0x66>
        {
            receive_package->receive_payload.period_ms =
                    receive_package->receive_payload.period_ms
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
                            + receive_message[i];
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	440a      	add	r2, r1
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	441a      	add	r2, r3
            receive_package->receive_payload.period_ms =
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	605a      	str	r2, [r3, #4]
            if (i != receive_package->receive_header.length + 1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	3301      	adds	r3, #1
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d008      	beq.n	8000b8e <convert_receive_package+0x60>
            {
                receive_package->receive_payload.period_ms =
                        receive_package->receive_payload.period_ms * 10;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	4613      	mov	r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	4413      	add	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	461a      	mov	r2, r3
                receive_package->receive_payload.period_ms =
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	605a      	str	r2, [r3, #4]
        for (int i = 2; i < receive_package->receive_header.length + 2 && i < array_size; i++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	da03      	bge.n	8000ba8 <convert_receive_package+0x7a>
 8000ba0:	7afb      	ldrb	r3, [r7, #11]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbda      	blt.n	8000b5e <convert_receive_package+0x30>
            }
        }
        receive_package->receive_header.length = 0;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	705a      	strb	r2, [r3, #1]
        return e_uart_package_convertor_err_ok;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <convert_receive_package+0x86>
    }
    return e_uart_package_convertor_err_invalid_argument;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	371c      	adds	r7, #28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <convert_header>:

e_uart_package_convertor_err_t convert_header()
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
    send_package.send_header.comand_id      = e_io_package_convertor_comand_led;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <convert_header+0x1c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
    send_package.send_header.message_lenght = SEND_MASSAGE_LENGHT;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <convert_header+0x1c>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	705a      	strb	r2, [r3, #1]
    return e_uart_package_convertor_err_ok;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000250 	.word	0x20000250

08000be0 <convert_payload>:

e_uart_package_convertor_err_t convert_payload(led_num_t led_num, led_ctrl_t led_state)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
    send_package.send_payload.led_num    = (uint8_t) led_num;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <convert_payload+0x2c>)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	7093      	strb	r3, [r2, #2]
    send_package.send_payload.led_status = (uint8_t) led_state;
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <convert_payload+0x2c>)
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	70d3      	strb	r3, [r2, #3]
    return e_uart_package_convertor_err_ok;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000250 	.word	0x20000250

08000c10 <convert_message>:

e_uart_package_convertor_err_t convert_message(uint8_t *send_message, uint8_t size,
        led_num_t led_num, led_ctrl_t led_state)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	70fb      	strb	r3, [r7, #3]
 8000c22:	460b      	mov	r3, r1
 8000c24:	70bb      	strb	r3, [r7, #2]
 8000c26:	4613      	mov	r3, r2
 8000c28:	707b      	strb	r3, [r7, #1]
    convert_header();
 8000c2a:	f7ff ffc9 	bl	8000bc0 <convert_header>
    convert_payload(led_num, led_state);
 8000c2e:	787a      	ldrb	r2, [r7, #1]
 8000c30:	78bb      	ldrb	r3, [r7, #2]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffd3 	bl	8000be0 <convert_payload>
    *(send_message + 0) = send_package.send_header.comand_id;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <convert_message+0x64>)
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	701a      	strb	r2, [r3, #0]
    *(send_message + 1) = send_package.send_header.message_lenght;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <convert_message+0x64>)
 8000c48:	7852      	ldrb	r2, [r2, #1]
 8000c4a:	701a      	strb	r2, [r3, #0]
    *(send_message + 2) = send_package.send_payload.led_num;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <convert_message+0x64>)
 8000c52:	7892      	ldrb	r2, [r2, #2]
 8000c54:	701a      	strb	r2, [r3, #0]
    *(send_message + 3) = send_package.send_payload.led_status;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3303      	adds	r3, #3
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <convert_message+0x64>)
 8000c5c:	78d2      	ldrb	r2, [r2, #3]
 8000c5e:	701a      	strb	r2, [r3, #0]
    *(send_message + 4) = '\0';
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3304      	adds	r3, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
    return e_uart_package_convertor_err_ok;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000250 	.word	0x20000250

08000c78 <io_spi_init>:
 */

#include "lib/UL/io/io_spi/io_spi.h"

e_io_spi_err_t io_spi_init()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    return e_io_spi_err_not_impemented;
 8000c7c:	2304      	movs	r3, #4
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <send_to_spi>:
{
    return e_io_spi_err_not_impemented;
}

e_io_spi_err_t send_to_spi(led_num_t led_num, led_ctrl_t led_state)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
    return e_io_spi_err_not_impemented;
 8000c98:	2304      	movs	r3, #4
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <io_spi_run>:

e_io_spi_err_t io_spi_run(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
    return e_io_spi_err_not_impemented;
 8000caa:	2304      	movs	r3, #4
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <io_uart_init>:
        .baud_rate    = 9600,
        .uart_type    = USART2,
};

e_io_uart_err_t io_uart_init()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    return (uart_init(&uart) == e_uart_err_ok) ?
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <io_uart_init+0x1c>)
 8000cbe:	f000 f995 	bl	8000fec <uart_init>
 8000cc2:	4603      	mov	r3, r0
            (e_io_uart_err_ok) : (e_io_uart_err_not_init);
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d101      	bne.n	8000ccc <io_uart_init+0x14>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e000      	b.n	8000cce <io_uart_init+0x16>
 8000ccc:	2302      	movs	r3, #2
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000064 	.word	0x20000064

08000cd8 <send_to_uart>:
    return (uart_deinit(&uart) == e_uart_err_ok) ?
            (e_io_uart_err_ok) : (e_io_uart_err_not_deinit);
}

e_io_uart_err_t send_to_uart(uint8_t *send_message, uint8_t lenght)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
    if (uart_send(&uart, send_message, lenght) != e_uart_err_ok)
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <send_to_uart+0x2c>)
 8000cec:	f000 f9c4 	bl	8001078 <uart_send>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <send_to_uart+0x22>
    {
        return e_io_uart_err_invalid_argument;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	e000      	b.n	8000cfc <send_to_uart+0x24>
    }
    return e_io_uart_err_ok;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000064 	.word	0x20000064

08000d08 <io_uart_receive>:

e_io_uart_err_t io_uart_receive(uint8_t *receive_message, uint8_t lenght)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
    if (uart_receive(&uart, receive_message,
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	461a      	mov	r2, r3
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <io_uart_receive+0x2c>)
 8000d1c:	f000 f9d1 	bl	80010c2 <uart_receive>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <io_uart_receive+0x22>
            lenght) != e_uart_err_ok)
    {
        return e_io_uart_err_invalid_argument;
 8000d26:	2304      	movs	r3, #4
 8000d28:	e000      	b.n	8000d2c <io_uart_receive+0x24>
    }
    return e_io_uart_err_ok;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000064 	.word	0x20000064

08000d38 <io_uart_reg_callback>:

e_io_uart_err_t io_uart_reg_callback(io_genericCb_t callback)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    if(callback != NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00a      	beq.n	8000d5c <io_uart_reg_callback+0x24>
    {
        if(objS_io_genericCb == NULL)
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <io_uart_reg_callback+0x34>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d104      	bne.n	8000d58 <io_uart_reg_callback+0x20>
        {
            objS_io_genericCb = callback;
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <io_uart_reg_callback+0x34>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6013      	str	r3, [r2, #0]
            return e_io_uart_err_ok;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e002      	b.n	8000d5e <io_uart_reg_callback+0x26>
        }
        return e_io_uart_err_callback_exist;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	e000      	b.n	8000d5e <io_uart_reg_callback+0x26>
    }
    return e_io_uart_err_invalid_argument;
 8000d5c:	2304      	movs	r3, #4
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000258 	.word	0x20000258

08000d70 <io_uart_unreg_callback>:

e_io_uart_err_t io_uart_unreg_callback(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
    if(objS_io_genericCb != NULL)
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <io_uart_unreg_callback+0x24>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d004      	beq.n	8000d86 <io_uart_unreg_callback+0x16>
    {
        objS_io_genericCb = NULL;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <io_uart_unreg_callback+0x24>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
        return e_io_uart_err_ok;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <io_uart_unreg_callback+0x18>
    }
    return e_io_uart_err_callback_already_NULL;
 8000d86:	2306      	movs	r3, #6
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000258 	.word	0x20000258

08000d98 <io_uart_run>:

e_io_uart_err_t io_uart_run(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
    if (is_all_data_receive)
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <io_uart_run+0x34>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <io_uart_run+0x1a>
    {
        is_all_data_receive = false;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <io_uart_run+0x34>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
        objS_io_genericCb(e_io_generic_event_data_received);
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <io_uart_run+0x38>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2001      	movs	r0, #1
 8000db0:	4798      	blx	r3
    }
    if (USART2->SR & UART_IT_RXNE)
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <io_uart_run+0x3c>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <io_uart_run+0x40>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <io_uart_run+0x2e>
    {
        objS_io_genericCb(e_io_generic_event_data_ready_to_receive);
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <io_uart_run+0x38>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	4798      	blx	r3
    }
}
 8000dc6:	bf00      	nop
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000254 	.word	0x20000254
 8000dd0:	20000258 	.word	0x20000258
 8000dd4:	40004400 	.word	0x40004400
 8000dd8:	10000020 	.word	0x10000020

08000ddc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    is_all_data_receive = true;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_UART_RxCpltCallback+0x1c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000254 	.word	0x20000254

08000dfc <spinner_init>:
static spinner_state_t spinner_state = e_spinner_state_run;
static uint32_t        spinner_period_ms = 2000;
static queue_t         queue;

e_spinner_err_t spinner_init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    if(led_init() != e_led_err_ok)
 8000e02:	f000 f8d9 	bl	8000fb8 <led_init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <spinner_init+0x14>
    {
        return e_spinner_err_not_init;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e021      	b.n	8000e54 <spinner_init+0x58>
    }

    if(create_queue(&queue, 10) != e_que_err_ok)
 8000e10:	210a      	movs	r1, #10
 8000e12:	4812      	ldr	r0, [pc, #72]	; (8000e5c <spinner_init+0x60>)
 8000e14:	f000 f97a 	bl	800110c <create_queue>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <spinner_init+0x26>
    {
        return e_spinner_err_not_init;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e018      	b.n	8000e54 <spinner_init+0x58>
    }

    led_num_t red    = e_led_num_1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
    led_num_t green  = e_led_num_2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	71bb      	strb	r3, [r7, #6]
    led_num_t yellow = e_led_num_3;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	717b      	strb	r3, [r7, #5]
    led_num_t blue   = e_led_num_4;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	713b      	strb	r3, [r7, #4]

    spinner_insert_led(red);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f813 	bl	8000e60 <spinner_insert_led>
    spinner_insert_led(green);
 8000e3a:	79bb      	ldrb	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f80f 	bl	8000e60 <spinner_insert_led>
    spinner_insert_led(yellow);
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f80b 	bl	8000e60 <spinner_insert_led>
    spinner_insert_led(blue);
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f807 	bl	8000e60 <spinner_insert_led>

    return e_spinner_err_ok;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000025c 	.word	0x2000025c

08000e60 <spinner_insert_led>:
    spinner_state = e_spinner_state_pause;
    return e_spinner_err_ok;
}

e_spinner_err_t spinner_insert_led(led_num_t e_LedNum)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
    spinner_ctrl_t objPL_item =
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	733b      	strb	r3, [r7, #12]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	737b      	strb	r3, [r7, #13]
    { .led = e_LedNum, .cmd = e_spinner_ctrl_insert };
    return (en_queue(&queue, &objPL_item) == e_que_err_ok) ?
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <spinner_insert_led+0x34>)
 8000e7a:	f000 f976 	bl	800116a <en_queue>
 8000e7e:	4603      	mov	r3, r0
            (e_spinner_err_ok) : (e_spinner_err_not_add_to_queue);
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <spinner_insert_led+0x28>
 8000e84:	2300      	movs	r3, #0
 8000e86:	e000      	b.n	8000e8a <spinner_insert_led+0x2a>
 8000e88:	2303      	movs	r3, #3
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000025c 	.word	0x2000025c

08000e98 <set_spinner_period_ms>:
    return ((led_deinit() == e_led_err_ok) && (delete_queue(&queue) == e_que_err_ok)) ?
            (e_spinner_err_ok) : (e_spinner_err_not_found);
}

e_spinner_err_t set_spinner_period_ms(uint32_t period)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    if(period > 0)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <set_spinner_period_ms+0x18>
    {
        spinner_period_ms = period;
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <set_spinner_period_ms+0x28>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6013      	str	r3, [r2, #0]
        return e_spinner_err_ok;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e000      	b.n	8000eb2 <set_spinner_period_ms+0x1a>
    }
    return e_spinner_err_invalid_argument;
 8000eb0:	2304      	movs	r3, #4
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000088 	.word	0x20000088

08000ec4 <button_init>:
static uint32_t   pressed_time_ms = 0;
static uint32_t   timeout = 0;


button_err_t button_init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
    { 0 };
    //  init
    GPIO_InitStruct.Pin = button.pin;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <button_init+0x3c>)
 8000eda:	889b      	ldrh	r3, [r3, #4]
 8000edc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <button_init+0x40>)
 8000ef0:	f000 fb88 	bl	8001604 <HAL_GPIO_Init>
    return e_button_err_ok;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000008c 	.word	0x2000008c
 8000f04:	40020000 	.word	0x40020000

08000f08 <button_reg_callback>:
{
    return e_button_err_ok;
}

button_err_t button_reg_callback(buttonCb_t callback)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    if(callback != NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00a      	beq.n	8000f2c <button_reg_callback+0x24>
    {
        if(objS_buttonCb == NULL)
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <button_reg_callback+0x34>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d104      	bne.n	8000f28 <button_reg_callback+0x20>
        {
            objS_buttonCb = callback;
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <button_reg_callback+0x34>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6013      	str	r3, [r2, #0]
            return e_button_err_ok;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e002      	b.n	8000f2e <button_reg_callback+0x26>
        }
        return e_button_err_callback_exist;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <button_reg_callback+0x26>
    }
    return e_button_err_invalid_argument;
 8000f2c:	2302      	movs	r3, #2
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000270 	.word	0x20000270

08000f40 <button_set_timeout>:
        objS_buttonCb(e_event_unpressed);
    }
}

button_err_t button_set_timeout(uint32_t timeout_ms)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    if (timeout_ms > 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <button_set_timeout+0x1a>
    {
        timeout = timeout_ms + DEBOUNCER_TIME_MS;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3332      	adds	r3, #50	; 0x32
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <button_set_timeout+0x28>)
 8000f54:	6013      	str	r3, [r2, #0]
        return e_button_err_ok;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <button_set_timeout+0x1c>
    }
    return e_button_err_invalid_argument;
 8000f5a:	2302      	movs	r3, #2
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	20000278 	.word	0x20000278

08000f6c <button_get_timeout_with_debouncer>:

uint32_t button_get_timeout_with_debouncer(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
    return timeout;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <button_get_timeout_with_debouncer+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000278 	.word	0x20000278

08000f84 <button_get_pressed_time>:

uint32_t button_get_pressed_time(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
    return pressed_time_ms;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <button_get_pressed_time+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000274 	.word	0x20000274

08000f9c <button_pressed_time_reset>:

button_err_t button_pressed_time_reset(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    pressed_time_ms = 0;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <button_pressed_time_reset+0x18>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
    return e_button_err_ok;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000274 	.word	0x20000274

08000fb8 <led_init>:
    }
    return e_led_err_NULL;
}

led_err_t led_init(void) 
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <led_init+0x30>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <led_init+0x30>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <led_init+0x30>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

    return e_led_err_ok;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40023800 	.word	0x40023800

08000fec <uart_init>:
 *      Author: yevhen.surkov
 */
#include "uart.h"

e_uart_err_t uart_init(obj_uart_t* objP_this)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    if (objP_this != NULL && objP_this->uart_handler != NULL &&
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d036      	beq.n	8001068 <uart_init+0x7c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d032      	beq.n	8001068 <uart_init+0x7c>
            objP_this->baud_rate !=0)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
    if (objP_this != NULL && objP_this->uart_handler != NULL &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d02e      	beq.n	8001068 <uart_init+0x7c>
    {
        objP_this->uart_handler->Instance           = USART2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <uart_init+0x88>)
 8001010:	601a      	str	r2, [r3, #0]
        objP_this->uart_handler->Init.BaudRate      = objP_this->baud_rate;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6a12      	ldr	r2, [r2, #32]
 800101a:	605a      	str	r2, [r3, #4]
        objP_this->uart_handler->Init.WordLength    = UART_WORDLENGTH_8B;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
        objP_this->uart_handler->Init.StopBits      = UART_STOPBITS_1;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
        objP_this->uart_handler->Init.Parity        = UART_PARITY_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
        objP_this->uart_handler->Init.Mode          = UART_MODE_TX_RX;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	220c      	movs	r2, #12
 800103a:	615a      	str	r2, [r3, #20]
        objP_this->uart_handler->Init.HwFlowCtl     = UART_HWCONTROL_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
        objP_this->uart_handler->Init.OverSampling  = UART_OVERSAMPLING_16;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
        if (HAL_UART_Init(objP_this->uart_handler) != HAL_OK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f8e1 	bl	8002218 <HAL_UART_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <uart_init+0x78>
        {
          Error_Handler();
 800105c:	f7ff fb58 	bl	8000710 <Error_Handler>
          return e_uart_err_init_fail;
 8001060:	2301      	movs	r3, #1
 8001062:	e002      	b.n	800106a <uart_init+0x7e>
        }

        return e_uart_err_ok;
 8001064:	2300      	movs	r3, #0
 8001066:	e000      	b.n	800106a <uart_init+0x7e>
    }

    return e_uart_err_init_fail;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40004400 	.word	0x40004400

08001078 <uart_send>:

    return e_uart_err_ok;
}

e_uart_err_t uart_send(obj_uart_t* objPL_this, uint8_t* str, uint8_t lenght)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	4613      	mov	r3, r2
 8001084:	71fb      	strb	r3, [r7, #7]
    if (objPL_this != NULL && str != NULL
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d015      	beq.n	80010b8 <uart_send+0x40>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d012      	beq.n	80010b8 <uart_send+0x40>
            && objPL_this->uart_handler != NULL)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00e      	beq.n	80010b8 <uart_send+0x40>
    {
        return (HAL_UART_Transmit_IT(objPL_this->uart_handler, str,
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	b292      	uxth	r2, r2
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 f904 	bl	80022b2 <HAL_UART_Transmit_IT>
 80010aa:	4603      	mov	r3, r0
                lenght) == HAL_OK) ? e_uart_err_ok : e_uart_err_send_fail;
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <uart_send+0x3c>
 80010b0:	2300      	movs	r3, #0
 80010b2:	e002      	b.n	80010ba <uart_send+0x42>
 80010b4:	2303      	movs	r3, #3
 80010b6:	e000      	b.n	80010ba <uart_send+0x42>
    }
    return e_uart_err_send_fail;
 80010b8:	2303      	movs	r3, #3
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <uart_receive>:

e_uart_err_t uart_receive(obj_uart_t* objPL_this, uint8_t* message_buffer, uint8_t length)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71fb      	strb	r3, [r7, #7]
    if (objPL_this != NULL  && objPL_this->uart_handler != NULL && length != 0)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d015      	beq.n	8001102 <uart_receive+0x40>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d011      	beq.n	8001102 <uart_receive+0x40>
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00e      	beq.n	8001102 <uart_receive+0x40>
    {
        return (HAL_UART_Receive_IT(objPL_this->uart_handler, message_buffer, length)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	79fa      	ldrb	r2, [r7, #7]
 80010ea:	b292      	uxth	r2, r2
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 f924 	bl	800233c <HAL_UART_Receive_IT>
 80010f4:	4603      	mov	r3, r0
                == HAL_OK) ? e_uart_err_ok : e_uart_err_receive_fail;
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <uart_receive+0x3c>
 80010fa:	2300      	movs	r3, #0
 80010fc:	e002      	b.n	8001104 <uart_receive+0x42>
 80010fe:	2304      	movs	r3, #4
 8001100:	e000      	b.n	8001104 <uart_receive+0x42>
    }
    return e_uart_err_receive_fail;
 8001102:	2304      	movs	r3, #4
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <create_queue>:
#include "queue.h"
#include <stdlib.h>
#include <string.h>

queue_err_t create_queue(queue_t *queue_this, uint32_t size)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    if (size != 0 && queue_this != NULL)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d021      	beq.n	8001160 <create_queue+0x54>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01e      	beq.n	8001160 <create_queue+0x54>
    {
        queue_this->front = -1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	605a      	str	r2, [r3, #4]
        queue_this->rear = -1;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	601a      	str	r2, [r3, #0]
        queue_this->curent_size = 0;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
        queue_this->size = size;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	609a      	str	r2, [r3, #8]
        if (((queue_this->P_array = (spinner_ctrl_t*) malloc(
                size * sizeof(spinner_ctrl_t)))) == NULL)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	005b      	lsls	r3, r3, #1
        if (((queue_this->P_array = (spinner_ctrl_t*) malloc(
 8001142:	4618      	mov	r0, r3
 8001144:	f004 fc74 	bl	8005a30 <malloc>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <create_queue+0x50>
        {
            return e_que_err_allocation_error;
 8001158:	2304      	movs	r3, #4
 800115a:	e002      	b.n	8001162 <create_queue+0x56>
        }
        return e_que_err_ok;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <create_queue+0x56>
    }
    return e_que_err_invalid_argument;
 8001160:	2303      	movs	r3, #3

}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <en_queue>:

queue_err_t en_queue(queue_t *queue_this, spinner_ctrl_t *P_item)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
    if (P_item != NULL && queue_this != NULL)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06d      	beq.n	8001256 <en_queue+0xec>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d06a      	beq.n	8001256 <en_queue+0xec>
    {
        if ((queue_this->front == 0 && queue_this->rear == queue_this->size - 1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <en_queue+0x2c>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	429a      	cmp	r2, r3
 8001194:	d00e      	beq.n	80011b4 <en_queue+0x4a>
                || (queue_this->rear
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6819      	ldr	r1, [r3, #0]
                        == (queue_this->front - 1) % (queue_this->size - 1)))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6892      	ldr	r2, [r2, #8]
 80011a4:	3a01      	subs	r2, #1
 80011a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80011aa:	fb02 f200 	mul.w	r2, r2, r0
 80011ae:	1a9b      	subs	r3, r3, r2
                || (queue_this->rear
 80011b0:	4299      	cmp	r1, r3
 80011b2:	d101      	bne.n	80011b8 <en_queue+0x4e>
        {
            return e_que_err_que_is_full;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e04f      	b.n	8001258 <en_queue+0xee>
        } else if (queue_this->front == -1) /* Insert First Element */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d115      	bne.n	80011ee <en_queue+0x84>
        {
            queue_this->front = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
            queue_this->rear = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
            memcpy(&queue_this->P_array[queue_this->rear], P_item,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	8812      	ldrh	r2, [r2, #0]
 80011de:	b292      	uxth	r2, r2
 80011e0:	801a      	strh	r2, [r3, #0]
                    sizeof(spinner_ctrl_t));
            queue_this->curent_size++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	e031      	b.n	8001252 <en_queue+0xe8>
        } else if (queue_this->rear == queue_this->size - 1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d116      	bne.n	800122a <en_queue+0xc0>
                && queue_this->front != 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d012      	beq.n	800122a <en_queue+0xc0>
        {
            queue_this->rear = 0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
            memcpy(&queue_this->P_array[queue_this->rear], P_item,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	8812      	ldrh	r2, [r2, #0]
 800121a:	b292      	uxth	r2, r2
 800121c:	801a      	strh	r2, [r3, #0]
                    sizeof(spinner_ctrl_t));
            queue_this->curent_size++;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	e013      	b.n	8001252 <en_queue+0xe8>
        } else
        {
            queue_this->rear++;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	601a      	str	r2, [r3, #0]
            memcpy(&queue_this->P_array[queue_this->rear], P_item,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	8812      	ldrh	r2, [r2, #0]
 8001244:	b292      	uxth	r2, r2
 8001246:	801a      	strh	r2, [r3, #0]
                    sizeof(spinner_ctrl_t));
            queue_this->curent_size++;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60da      	str	r2, [r3, #12]
        }
        return e_que_err_ok;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <en_queue+0xee>
    }
    return e_que_err_invalid_argument;
 8001256:	2303      	movs	r3, #3
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800126a:	e003      	b.n	8001274 <LoopCopyDataInit>

0800126c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800126e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001272:	3104      	adds	r1, #4

08001274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001274:	480b      	ldr	r0, [pc, #44]	; (80012a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800127a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800127c:	d3f6      	bcc.n	800126c <CopyDataInit>
  ldr  r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001280:	e002      	b.n	8001288 <LoopFillZerobss>

08001282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001284:	f842 3b04 	str.w	r3, [r2], #4

08001288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800128a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800128c:	d3f9      	bcc.n	8001282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128e:	f7ff fb27 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f004 fba9 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff f91b 	bl	80004d0 <main>
  bx  lr    
 800129a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800129c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012a0:	08005bf8 	.word	0x08005bf8
  ldr  r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012a8:	20000104 	.word	0x20000104
  ldr  r2, =_sbss
 80012ac:	20000104 	.word	0x20000104
  ldr  r3, = _ebss
 80012b0:	20004c1c 	.word	0x20004c1c

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_Init+0x40>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_Init+0x40>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x40>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f92b 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fa18 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f943 	bl	80015a6 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f90b 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000098 	.word	0x20000098
 8001358:	20000094 	.word	0x20000094

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000098 	.word	0x20000098
 8001380:	20004bd4 	.word	0x20004bd4

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20004bd4 	.word	0x20004bd4

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff3e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff31 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d004      	beq.n	80015dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e00c      	b.n	80015f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2205      	movs	r2, #5
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0201 	bic.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	e16b      	b.n	80018f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	f040 815a 	bne.w	80018f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d00b      	beq.n	800165e <HAL_GPIO_Init+0x5a>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d007      	beq.n	800165e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001652:	2b11      	cmp	r3, #17
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b12      	cmp	r3, #18
 800165c:	d130      	bne.n	80016c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	2203      	movs	r2, #3
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	f003 0201 	and.w	r2, r3, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0xfc>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b12      	cmp	r3, #18
 80016fe:	d123      	bne.n	8001748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80b4 	beq.w	80018f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_GPIO_Init+0x308>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a5e      	ldr	r2, [pc, #376]	; (800190c <HAL_GPIO_Init+0x308>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_GPIO_Init+0x308>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a6:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_GPIO_Init+0x30c>)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a51      	ldr	r2, [pc, #324]	; (8001914 <HAL_GPIO_Init+0x310>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d02b      	beq.n	800182a <HAL_GPIO_Init+0x226>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a50      	ldr	r2, [pc, #320]	; (8001918 <HAL_GPIO_Init+0x314>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d025      	beq.n	8001826 <HAL_GPIO_Init+0x222>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4f      	ldr	r2, [pc, #316]	; (800191c <HAL_GPIO_Init+0x318>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01f      	beq.n	8001822 <HAL_GPIO_Init+0x21e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <HAL_GPIO_Init+0x31c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x21a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4d      	ldr	r2, [pc, #308]	; (8001924 <HAL_GPIO_Init+0x320>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x216>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4c      	ldr	r2, [pc, #304]	; (8001928 <HAL_GPIO_Init+0x324>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x212>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4b      	ldr	r2, [pc, #300]	; (800192c <HAL_GPIO_Init+0x328>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_GPIO_Init+0x32c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x20a>
 800180a:	2307      	movs	r3, #7
 800180c:	e00e      	b.n	800182c <HAL_GPIO_Init+0x228>
 800180e:	2308      	movs	r3, #8
 8001810:	e00c      	b.n	800182c <HAL_GPIO_Init+0x228>
 8001812:	2306      	movs	r3, #6
 8001814:	e00a      	b.n	800182c <HAL_GPIO_Init+0x228>
 8001816:	2305      	movs	r3, #5
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x228>
 800181a:	2304      	movs	r3, #4
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x228>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x228>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x228>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x228>
 800182a:	2300      	movs	r3, #0
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183c:	4934      	ldr	r1, [pc, #208]	; (8001910 <HAL_GPIO_Init+0x30c>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <HAL_GPIO_Init+0x330>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_GPIO_Init+0x330>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001874:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x330>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001898:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_GPIO_Init+0x330>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_GPIO_Init+0x330>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c2:	4a1c      	ldr	r2, [pc, #112]	; (8001934 <HAL_GPIO_Init+0x330>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_GPIO_Init+0x330>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_GPIO_Init+0x330>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b0f      	cmp	r3, #15
 80018fc:	f67f ae90 	bls.w	8001620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001900:	bf00      	nop
 8001902:	3724      	adds	r7, #36	; 0x24
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40021400 	.word	0x40021400
 800192c:	40021800 	.word	0x40021800
 8001930:	40021c00 	.word	0x40021c00
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	401a      	ands	r2, r3
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	429a      	cmp	r2, r3
 8001982:	d104      	bne.n	800198e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001984:	887b      	ldrh	r3, [r7, #2]
 8001986:	041a      	lsls	r2, r3, #16
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800198c:	e002      	b.n	8001994 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e25b      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d075      	beq.n	8001aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	4ba3      	ldr	r3, [pc, #652]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d00c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4ba0      	ldr	r3, [pc, #640]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d112      	bne.n	80019fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	4b9d      	ldr	r3, [pc, #628]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e2:	d10b      	bne.n	80019fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	4b99      	ldr	r3, [pc, #612]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d05b      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x108>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d157      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e236      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a04:	d106      	bne.n	8001a14 <HAL_RCC_OscConfig+0x74>
 8001a06:	4b91      	ldr	r3, [pc, #580]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a90      	ldr	r2, [pc, #576]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xb0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b8b      	ldr	r3, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a8a      	ldr	r2, [pc, #552]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a87      	ldr	r2, [pc, #540]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xb0>
 8001a38:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a83      	ldr	r2, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b81      	ldr	r3, [pc, #516]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a80      	ldr	r2, [pc, #512]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fc94 	bl	8001384 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fc90 	bl	8001384 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1fb      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xc0>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc80 	bl	8001384 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fc7c 	bl	8001384 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1e7      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0xe8>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x152>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1bb      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4952      	ldr	r1, [pc, #328]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <HAL_RCC_OscConfig+0x2b0>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff fc35 	bl	8001384 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fc31 	bl	8001384 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e19c      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4940      	ldr	r1, [pc, #256]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0x2b0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fc14 	bl	8001384 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff fc10 	bl	8001384 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e17b      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d030      	beq.n	8001bec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x2b4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff fbf4 	bl	8001384 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fbf0 	bl	8001384 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e15b      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x200>
 8001bbe:	e015      	b.n	8001bec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x2b4>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fbdd 	bl	8001384 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff fbd9 	bl	8001384 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e144      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f0      	bne.n	8001bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80a0 	beq.w	8001d3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_OscConfig+0x2b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d121      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_RCC_OscConfig+0x2b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_RCC_OscConfig+0x2b8>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb9f 	bl	8001384 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e011      	b.n	8001c6e <HAL_RCC_OscConfig+0x2ce>
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	42470000 	.word	0x42470000
 8001c54:	42470e80 	.word	0x42470e80
 8001c58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5c:	f7ff fb92 	bl	8001384 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0fd      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b81      	ldr	r3, [pc, #516]	; (8001e74 <HAL_RCC_OscConfig+0x4d4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
 8001c82:	4b7d      	ldr	r3, [pc, #500]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a7c      	ldr	r2, [pc, #496]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	e01c      	b.n	8001cca <HAL_RCC_OscConfig+0x32a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b05      	cmp	r3, #5
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x312>
 8001c98:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a76      	ldr	r2, [pc, #472]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	4b74      	ldr	r3, [pc, #464]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a73      	ldr	r2, [pc, #460]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x32a>
 8001cb2:	4b71      	ldr	r3, [pc, #452]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a70      	ldr	r2, [pc, #448]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	4b6e      	ldr	r3, [pc, #440]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a6d      	ldr	r2, [pc, #436]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d015      	beq.n	8001cfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fb57 	bl	8001384 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff fb53 	bl	8001384 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e0bc      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ee      	beq.n	8001cda <HAL_RCC_OscConfig+0x33a>
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fb41 	bl	8001384 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff fb3d 	bl	8001384 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0a6      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1c:	4b56      	ldr	r3, [pc, #344]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d105      	bne.n	8001d3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2e:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8092 	beq.w	8001e68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d44:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d05c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d141      	bne.n	8001ddc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4dc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fb11 	bl	8001384 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff fb0d 	bl	8001384 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e078      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	019b      	lsls	r3, r3, #6
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	061b      	lsls	r3, r3, #24
 8001da8:	4933      	ldr	r1, [pc, #204]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_RCC_OscConfig+0x4dc>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fae6 	bl	8001384 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff fae2 	bl	8001384 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e04d      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x41c>
 8001dda:	e045      	b.n	8001e68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4dc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff facf 	bl	8001384 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff facb 	bl	8001384 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e036      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x44a>
 8001e08:	e02e      	b.n	8001e68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e029      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_RCC_OscConfig+0x4d8>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d11c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d115      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3e:	4013      	ands	r3, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10d      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40007000 	.word	0x40007000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	42470060 	.word	0x42470060

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0cc      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d90c      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d044      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e067      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7ff fa08 	bl	8001384 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7ff fa04 	bl	8001384 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e04f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20c      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4601      	mov	r1, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f968 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00
 800203c:	40023800 	.word	0x40023800
 8002040:	08005bd0 	.word	0x08005bd0
 8002044:	20000000 	.word	0x20000000
 8002048:	20000094 	.word	0x20000094

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d007      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x32>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d008      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x38>
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 808d 	bne.w	8002192 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4b4b      	ldr	r3, [pc, #300]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800207a:	60bb      	str	r3, [r7, #8]
       break;
 800207c:	e08c      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207e:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_RCC_GetSysClockFreq+0x160>)
 8002080:	60bb      	str	r3, [r7, #8]
      break;
 8002082:	e089      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d023      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209a:	4b42      	ldr	r3, [pc, #264]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	f04f 0400 	mov.w	r4, #0
 80020a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	ea03 0501 	and.w	r5, r3, r1
 80020b0:	ea04 0602 	and.w	r6, r4, r2
 80020b4:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <HAL_RCC_GetSysClockFreq+0x160>)
 80020b6:	fb02 f106 	mul.w	r1, r2, r6
 80020ba:	2200      	movs	r2, #0
 80020bc:	fb02 f205 	mul.w	r2, r2, r5
 80020c0:	440a      	add	r2, r1
 80020c2:	493a      	ldr	r1, [pc, #232]	; (80021ac <HAL_RCC_GetSysClockFreq+0x160>)
 80020c4:	fba5 0101 	umull	r0, r1, r5, r1
 80020c8:	1853      	adds	r3, r2, r1
 80020ca:	4619      	mov	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	461a      	mov	r2, r3
 80020d4:	4623      	mov	r3, r4
 80020d6:	f7fe f87b 	bl	80001d0 <__aeabi_uldivmod>
 80020da:	4603      	mov	r3, r0
 80020dc:	460c      	mov	r4, r1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e049      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	099b      	lsrs	r3, r3, #6
 80020e8:	f04f 0400 	mov.w	r4, #0
 80020ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	ea03 0501 	and.w	r5, r3, r1
 80020f8:	ea04 0602 	and.w	r6, r4, r2
 80020fc:	4629      	mov	r1, r5
 80020fe:	4632      	mov	r2, r6
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f04f 0400 	mov.w	r4, #0
 8002108:	0154      	lsls	r4, r2, #5
 800210a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800210e:	014b      	lsls	r3, r1, #5
 8002110:	4619      	mov	r1, r3
 8002112:	4622      	mov	r2, r4
 8002114:	1b49      	subs	r1, r1, r5
 8002116:	eb62 0206 	sbc.w	r2, r2, r6
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	f04f 0400 	mov.w	r4, #0
 8002122:	0194      	lsls	r4, r2, #6
 8002124:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002128:	018b      	lsls	r3, r1, #6
 800212a:	1a5b      	subs	r3, r3, r1
 800212c:	eb64 0402 	sbc.w	r4, r4, r2
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	00e2      	lsls	r2, r4, #3
 800213a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800213e:	00d9      	lsls	r1, r3, #3
 8002140:	460b      	mov	r3, r1
 8002142:	4614      	mov	r4, r2
 8002144:	195b      	adds	r3, r3, r5
 8002146:	eb44 0406 	adc.w	r4, r4, r6
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	02a2      	lsls	r2, r4, #10
 8002154:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002158:	0299      	lsls	r1, r3, #10
 800215a:	460b      	mov	r3, r1
 800215c:	4614      	mov	r4, r2
 800215e:	4618      	mov	r0, r3
 8002160:	4621      	mov	r1, r4
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f04f 0400 	mov.w	r4, #0
 8002168:	461a      	mov	r2, r3
 800216a:	4623      	mov	r3, r4
 800216c:	f7fe f830 	bl	80001d0 <__aeabi_uldivmod>
 8002170:	4603      	mov	r3, r0
 8002172:	460c      	mov	r4, r1
 8002174:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	3301      	adds	r3, #1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	60bb      	str	r3, [r7, #8]
      break;
 8002190:	e002      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002194:	60bb      	str	r3, [r7, #8]
      break;
 8002196:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002198:	68bb      	ldr	r3, [r7, #8]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	017d7840 	.word	0x017d7840

080021b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000000 	.word	0x20000000

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021cc:	f7ff fff0 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021d0:	4601      	mov	r1, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0a9b      	lsrs	r3, r3, #10
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08005be0 	.word	0x08005be0

080021f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021f4:	f7ff ffdc 	bl	80021b0 <HAL_RCC_GetHCLKFreq>
 80021f8:	4601      	mov	r1, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0b5b      	lsrs	r3, r3, #13
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	fa21 f303 	lsr.w	r3, r1, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	08005be0 	.word	0x08005be0

08002218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e03f      	b.n	80022aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fa96 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	; 0x24
 8002248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800225a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 faf9 	bl	8002854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d130      	bne.n	800232e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_UART_Transmit_IT+0x26>
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e029      	b.n	8002330 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Transmit_IT+0x38>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e022      	b.n	8002330 <HAL_UART_Transmit_IT+0x7e>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2221      	movs	r2, #33	; 0x21
 800230e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002328:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
  }
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d140      	bne.n	80023d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_UART_Receive_IT+0x26>
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e039      	b.n	80023da <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_UART_Receive_IT+0x38>
 8002370:	2302      	movs	r3, #2
 8002372:	e032      	b.n	80023da <HAL_UART_Receive_IT+0x9e>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2222      	movs	r2, #34	; 0x22
 8002398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	e000      	b.n	80023da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
  }
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10d      	bne.n	800243a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_UART_IRQHandler+0x52>
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f98c 	bl	8002750 <UART_Receive_IT>
      return;
 8002438:	e0d1      	b.n	80025de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80b0 	beq.w	80025a2 <HAL_UART_IRQHandler+0x1ba>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_UART_IRQHandler+0x70>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80a5 	beq.w	80025a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_UART_IRQHandler+0x90>
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_UART_IRQHandler+0xb0>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	f043 0202 	orr.w	r2, r3, #2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_UART_IRQHandler+0xd0>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b0:	f043 0204 	orr.w	r2, r3, #4
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00f      	beq.n	80024e2 <HAL_UART_IRQHandler+0xfa>
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d104      	bne.n	80024d6 <HAL_UART_IRQHandler+0xee>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	f043 0208 	orr.w	r2, r3, #8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d078      	beq.n	80025dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_UART_IRQHandler+0x11c>
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f926 	bl	8002750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250e:	2b40      	cmp	r3, #64	; 0x40
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_UART_IRQHandler+0x144>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d031      	beq.n	8002590 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f86f 	bl	8002610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d123      	bne.n	8002588 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800254e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_UART_IRQHandler+0x1fc>)
 800255e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f82a 	bl	80015be <HAL_DMA_Abort_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800257a:	4610      	mov	r0, r2
 800257c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257e:	e00e      	b.n	800259e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f83b 	bl	80025fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002586:	e00a      	b.n	800259e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f837 	bl	80025fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258e:	e006      	b.n	800259e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f833 	bl	80025fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800259c:	e01e      	b.n	80025dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259e:	bf00      	nop
    return;
 80025a0:	e01c      	b.n	80025dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_UART_IRQHandler+0x1d6>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f85c 	bl	8002674 <UART_Transmit_IT>
    return;
 80025bc:	e00f      	b.n	80025de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_UART_IRQHandler+0x1f6>
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8a4 	bl	8002720 <UART_EndTransmit_IT>
    return;
 80025d8:	bf00      	nop
 80025da:	e000      	b.n	80025de <HAL_UART_IRQHandler+0x1f6>
    return;
 80025dc:	bf00      	nop
  }
}
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	0800264d 	.word	0x0800264d

080025e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002626:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0201 	bic.w	r2, r2, #1
 8002636:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff ffc8 	bl	80025fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b21      	cmp	r3, #33	; 0x21
 8002686:	d144      	bne.n	8002712 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002690:	d11a      	bne.n	80026c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e00e      	b.n	80026da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	e008      	b.n	80026da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6211      	str	r1, [r2, #32]
 80026d2:	781a      	ldrb	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4619      	mov	r1, r3
 80026e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002736:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff51 	bl	80025e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b22      	cmp	r3, #34	; 0x22
 8002762:	d171      	bne.n	8002848 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276c:	d123      	bne.n	80027b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002772:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10e      	bne.n	800279a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	b29b      	uxth	r3, r3
 8002784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	1c9a      	adds	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
 8002798:	e029      	b.n	80027ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
 80027b4:	e01b      	b.n	80027ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6858      	ldr	r0, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	1c59      	adds	r1, r3, #1
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6291      	str	r1, [r2, #40]	; 0x28
 80027ce:	b2c2      	uxtb	r2, r0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e00c      	b.n	80027ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	1c58      	adds	r0, r3, #1
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	6288      	str	r0, [r1, #40]	; 0x28
 80027e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4619      	mov	r1, r3
 80027fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d120      	bne.n	8002844 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0220 	bic.w	r2, r2, #32
 8002810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe face 	bl	8000ddc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e002      	b.n	800284a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e000      	b.n	800284a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002896:	f023 030c 	bic.w	r3, r3, #12
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c2:	f040 818b 	bne.w	8002bdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4ac1      	ldr	r2, [pc, #772]	; (8002bd0 <UART_SetConfig+0x37c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d005      	beq.n	80028dc <UART_SetConfig+0x88>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4abf      	ldr	r2, [pc, #764]	; (8002bd4 <UART_SetConfig+0x380>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f040 80bd 	bne.w	8002a56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028dc:	f7ff fc88 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 80028e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	461d      	mov	r5, r3
 80028e6:	f04f 0600 	mov.w	r6, #0
 80028ea:	46a8      	mov	r8, r5
 80028ec:	46b1      	mov	r9, r6
 80028ee:	eb18 0308 	adds.w	r3, r8, r8
 80028f2:	eb49 0409 	adc.w	r4, r9, r9
 80028f6:	4698      	mov	r8, r3
 80028f8:	46a1      	mov	r9, r4
 80028fa:	eb18 0805 	adds.w	r8, r8, r5
 80028fe:	eb49 0906 	adc.w	r9, r9, r6
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800290e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002912:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002916:	4688      	mov	r8, r1
 8002918:	4691      	mov	r9, r2
 800291a:	eb18 0005 	adds.w	r0, r8, r5
 800291e:	eb49 0106 	adc.w	r1, r9, r6
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	461d      	mov	r5, r3
 8002928:	f04f 0600 	mov.w	r6, #0
 800292c:	196b      	adds	r3, r5, r5
 800292e:	eb46 0406 	adc.w	r4, r6, r6
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	f7fd fc4b 	bl	80001d0 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	461a      	mov	r2, r3
 8002940:	4ba5      	ldr	r3, [pc, #660]	; (8002bd8 <UART_SetConfig+0x384>)
 8002942:	fba3 2302 	umull	r2, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	461d      	mov	r5, r3
 8002950:	f04f 0600 	mov.w	r6, #0
 8002954:	46a9      	mov	r9, r5
 8002956:	46b2      	mov	sl, r6
 8002958:	eb19 0309 	adds.w	r3, r9, r9
 800295c:	eb4a 040a 	adc.w	r4, sl, sl
 8002960:	4699      	mov	r9, r3
 8002962:	46a2      	mov	sl, r4
 8002964:	eb19 0905 	adds.w	r9, r9, r5
 8002968:	eb4a 0a06 	adc.w	sl, sl, r6
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002978:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800297c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002980:	4689      	mov	r9, r1
 8002982:	4692      	mov	sl, r2
 8002984:	eb19 0005 	adds.w	r0, r9, r5
 8002988:	eb4a 0106 	adc.w	r1, sl, r6
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	461d      	mov	r5, r3
 8002992:	f04f 0600 	mov.w	r6, #0
 8002996:	196b      	adds	r3, r5, r5
 8002998:	eb46 0406 	adc.w	r4, r6, r6
 800299c:	461a      	mov	r2, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	f7fd fc16 	bl	80001d0 <__aeabi_uldivmod>
 80029a4:	4603      	mov	r3, r0
 80029a6:	460c      	mov	r4, r1
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <UART_SetConfig+0x384>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	2164      	movs	r1, #100	; 0x64
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	4a86      	ldr	r2, [pc, #536]	; (8002bd8 <UART_SetConfig+0x384>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029cc:	4498      	add	r8, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	461d      	mov	r5, r3
 80029d2:	f04f 0600 	mov.w	r6, #0
 80029d6:	46a9      	mov	r9, r5
 80029d8:	46b2      	mov	sl, r6
 80029da:	eb19 0309 	adds.w	r3, r9, r9
 80029de:	eb4a 040a 	adc.w	r4, sl, sl
 80029e2:	4699      	mov	r9, r3
 80029e4:	46a2      	mov	sl, r4
 80029e6:	eb19 0905 	adds.w	r9, r9, r5
 80029ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a02:	4689      	mov	r9, r1
 8002a04:	4692      	mov	sl, r2
 8002a06:	eb19 0005 	adds.w	r0, r9, r5
 8002a0a:	eb4a 0106 	adc.w	r1, sl, r6
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	461d      	mov	r5, r3
 8002a14:	f04f 0600 	mov.w	r6, #0
 8002a18:	196b      	adds	r3, r5, r5
 8002a1a:	eb46 0406 	adc.w	r4, r6, r6
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4623      	mov	r3, r4
 8002a22:	f7fd fbd5 	bl	80001d0 <__aeabi_uldivmod>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <UART_SetConfig+0x384>)
 8002a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2164      	movs	r1, #100	; 0x64
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	4a65      	ldr	r2, [pc, #404]	; (8002bd8 <UART_SetConfig+0x384>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	f003 0207 	and.w	r2, r3, #7
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4442      	add	r2, r8
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	e26f      	b.n	8002f36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a56:	f7ff fbb7 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8002a5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	461d      	mov	r5, r3
 8002a60:	f04f 0600 	mov.w	r6, #0
 8002a64:	46a8      	mov	r8, r5
 8002a66:	46b1      	mov	r9, r6
 8002a68:	eb18 0308 	adds.w	r3, r8, r8
 8002a6c:	eb49 0409 	adc.w	r4, r9, r9
 8002a70:	4698      	mov	r8, r3
 8002a72:	46a1      	mov	r9, r4
 8002a74:	eb18 0805 	adds.w	r8, r8, r5
 8002a78:	eb49 0906 	adc.w	r9, r9, r6
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a90:	4688      	mov	r8, r1
 8002a92:	4691      	mov	r9, r2
 8002a94:	eb18 0005 	adds.w	r0, r8, r5
 8002a98:	eb49 0106 	adc.w	r1, r9, r6
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	f04f 0600 	mov.w	r6, #0
 8002aa6:	196b      	adds	r3, r5, r5
 8002aa8:	eb46 0406 	adc.w	r4, r6, r6
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	f7fd fb8e 	bl	80001d0 <__aeabi_uldivmod>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <UART_SetConfig+0x384>)
 8002abc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	461d      	mov	r5, r3
 8002aca:	f04f 0600 	mov.w	r6, #0
 8002ace:	46a9      	mov	r9, r5
 8002ad0:	46b2      	mov	sl, r6
 8002ad2:	eb19 0309 	adds.w	r3, r9, r9
 8002ad6:	eb4a 040a 	adc.w	r4, sl, sl
 8002ada:	4699      	mov	r9, r3
 8002adc:	46a2      	mov	sl, r4
 8002ade:	eb19 0905 	adds.w	r9, r9, r5
 8002ae2:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002afa:	4689      	mov	r9, r1
 8002afc:	4692      	mov	sl, r2
 8002afe:	eb19 0005 	adds.w	r0, r9, r5
 8002b02:	eb4a 0106 	adc.w	r1, sl, r6
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	f04f 0600 	mov.w	r6, #0
 8002b10:	196b      	adds	r3, r5, r5
 8002b12:	eb46 0406 	adc.w	r4, r6, r6
 8002b16:	461a      	mov	r2, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	f7fd fb59 	bl	80001d0 <__aeabi_uldivmod>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460c      	mov	r4, r1
 8002b22:	461a      	mov	r2, r3
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <UART_SetConfig+0x384>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2164      	movs	r1, #100	; 0x64
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	3332      	adds	r3, #50	; 0x32
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <UART_SetConfig+0x384>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b46:	4498      	add	r8, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	f04f 0600 	mov.w	r6, #0
 8002b50:	46a9      	mov	r9, r5
 8002b52:	46b2      	mov	sl, r6
 8002b54:	eb19 0309 	adds.w	r3, r9, r9
 8002b58:	eb4a 040a 	adc.w	r4, sl, sl
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	46a2      	mov	sl, r4
 8002b60:	eb19 0905 	adds.w	r9, r9, r5
 8002b64:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b68:	f04f 0100 	mov.w	r1, #0
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b7c:	4689      	mov	r9, r1
 8002b7e:	4692      	mov	sl, r2
 8002b80:	eb19 0005 	adds.w	r0, r9, r5
 8002b84:	eb4a 0106 	adc.w	r1, sl, r6
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	f04f 0600 	mov.w	r6, #0
 8002b92:	196b      	adds	r3, r5, r5
 8002b94:	eb46 0406 	adc.w	r4, r6, r6
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7fd fb18 	bl	80001d0 <__aeabi_uldivmod>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <UART_SetConfig+0x384>)
 8002ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	2164      	movs	r1, #100	; 0x64
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	3332      	adds	r3, #50	; 0x32
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <UART_SetConfig+0x384>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	f003 0207 	and.w	r2, r3, #7
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4442      	add	r2, r8
 8002bcc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002bce:	e1b2      	b.n	8002f36 <UART_SetConfig+0x6e2>
 8002bd0:	40011000 	.word	0x40011000
 8002bd4:	40011400 	.word	0x40011400
 8002bd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4ad7      	ldr	r2, [pc, #860]	; (8002f40 <UART_SetConfig+0x6ec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d005      	beq.n	8002bf2 <UART_SetConfig+0x39e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4ad6      	ldr	r2, [pc, #856]	; (8002f44 <UART_SetConfig+0x6f0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	f040 80d1 	bne.w	8002d94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bf2:	f7ff fafd 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8002bf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	469a      	mov	sl, r3
 8002bfc:	f04f 0b00 	mov.w	fp, #0
 8002c00:	46d0      	mov	r8, sl
 8002c02:	46d9      	mov	r9, fp
 8002c04:	eb18 0308 	adds.w	r3, r8, r8
 8002c08:	eb49 0409 	adc.w	r4, r9, r9
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	46a1      	mov	r9, r4
 8002c10:	eb18 080a 	adds.w	r8, r8, sl
 8002c14:	eb49 090b 	adc.w	r9, r9, fp
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c2c:	4688      	mov	r8, r1
 8002c2e:	4691      	mov	r9, r2
 8002c30:	eb1a 0508 	adds.w	r5, sl, r8
 8002c34:	eb4b 0609 	adc.w	r6, fp, r9
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0300 	mov.w	r3, #0
 8002c46:	f04f 0400 	mov.w	r4, #0
 8002c4a:	0094      	lsls	r4, r2, #2
 8002c4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c50:	008b      	lsls	r3, r1, #2
 8002c52:	461a      	mov	r2, r3
 8002c54:	4623      	mov	r3, r4
 8002c56:	4628      	mov	r0, r5
 8002c58:	4631      	mov	r1, r6
 8002c5a:	f7fd fab9 	bl	80001d0 <__aeabi_uldivmod>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	461a      	mov	r2, r3
 8002c64:	4bb8      	ldr	r3, [pc, #736]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002c66:	fba3 2302 	umull	r2, r3, r3, r2
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	469b      	mov	fp, r3
 8002c74:	f04f 0c00 	mov.w	ip, #0
 8002c78:	46d9      	mov	r9, fp
 8002c7a:	46e2      	mov	sl, ip
 8002c7c:	eb19 0309 	adds.w	r3, r9, r9
 8002c80:	eb4a 040a 	adc.w	r4, sl, sl
 8002c84:	4699      	mov	r9, r3
 8002c86:	46a2      	mov	sl, r4
 8002c88:	eb19 090b 	adds.w	r9, r9, fp
 8002c8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ca0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca4:	4689      	mov	r9, r1
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	eb1b 0509 	adds.w	r5, fp, r9
 8002cac:	eb4c 060a 	adc.w	r6, ip, sl
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f04f 0400 	mov.w	r4, #0
 8002cc2:	0094      	lsls	r4, r2, #2
 8002cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4623      	mov	r3, r4
 8002cce:	4628      	mov	r0, r5
 8002cd0:	4631      	mov	r1, r6
 8002cd2:	f7fd fa7d 	bl	80001d0 <__aeabi_uldivmod>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	460c      	mov	r4, r1
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b9a      	ldr	r3, [pc, #616]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002cde:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2164      	movs	r1, #100	; 0x64
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a95      	ldr	r2, [pc, #596]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfc:	4498      	add	r8, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	469b      	mov	fp, r3
 8002d02:	f04f 0c00 	mov.w	ip, #0
 8002d06:	46d9      	mov	r9, fp
 8002d08:	46e2      	mov	sl, ip
 8002d0a:	eb19 0309 	adds.w	r3, r9, r9
 8002d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8002d12:	4699      	mov	r9, r3
 8002d14:	46a2      	mov	sl, r4
 8002d16:	eb19 090b 	adds.w	r9, r9, fp
 8002d1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d32:	4689      	mov	r9, r1
 8002d34:	4692      	mov	sl, r2
 8002d36:	eb1b 0509 	adds.w	r5, fp, r9
 8002d3a:	eb4c 060a 	adc.w	r6, ip, sl
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4619      	mov	r1, r3
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	0094      	lsls	r4, r2, #2
 8002d52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d56:	008b      	lsls	r3, r1, #2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	4631      	mov	r1, r6
 8002d60:	f7fd fa36 	bl	80001d0 <__aeabi_uldivmod>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b77      	ldr	r3, [pc, #476]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	2164      	movs	r1, #100	; 0x64
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	3332      	adds	r3, #50	; 0x32
 8002d7e:	4a72      	ldr	r2, [pc, #456]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	f003 020f 	and.w	r2, r3, #15
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4442      	add	r2, r8
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	e0d0      	b.n	8002f36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d94:	f7ff fa18 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8002d98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	469a      	mov	sl, r3
 8002d9e:	f04f 0b00 	mov.w	fp, #0
 8002da2:	46d0      	mov	r8, sl
 8002da4:	46d9      	mov	r9, fp
 8002da6:	eb18 0308 	adds.w	r3, r8, r8
 8002daa:	eb49 0409 	adc.w	r4, r9, r9
 8002dae:	4698      	mov	r8, r3
 8002db0:	46a1      	mov	r9, r4
 8002db2:	eb18 080a 	adds.w	r8, r8, sl
 8002db6:	eb49 090b 	adc.w	r9, r9, fp
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002dc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002dce:	4688      	mov	r8, r1
 8002dd0:	4691      	mov	r9, r2
 8002dd2:	eb1a 0508 	adds.w	r5, sl, r8
 8002dd6:	eb4b 0609 	adc.w	r6, fp, r9
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4619      	mov	r1, r3
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	f04f 0400 	mov.w	r4, #0
 8002dec:	0094      	lsls	r4, r2, #2
 8002dee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002df2:	008b      	lsls	r3, r1, #2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4623      	mov	r3, r4
 8002df8:	4628      	mov	r0, r5
 8002dfa:	4631      	mov	r1, r6
 8002dfc:	f7fd f9e8 	bl	80001d0 <__aeabi_uldivmod>
 8002e00:	4603      	mov	r3, r0
 8002e02:	460c      	mov	r4, r1
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002e08:	fba3 2302 	umull	r2, r3, r3, r2
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	469b      	mov	fp, r3
 8002e16:	f04f 0c00 	mov.w	ip, #0
 8002e1a:	46d9      	mov	r9, fp
 8002e1c:	46e2      	mov	sl, ip
 8002e1e:	eb19 0309 	adds.w	r3, r9, r9
 8002e22:	eb4a 040a 	adc.w	r4, sl, sl
 8002e26:	4699      	mov	r9, r3
 8002e28:	46a2      	mov	sl, r4
 8002e2a:	eb19 090b 	adds.w	r9, r9, fp
 8002e2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e46:	4689      	mov	r9, r1
 8002e48:	4692      	mov	sl, r2
 8002e4a:	eb1b 0509 	adds.w	r5, fp, r9
 8002e4e:	eb4c 060a 	adc.w	r6, ip, sl
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	0094      	lsls	r4, r2, #2
 8002e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e6a:	008b      	lsls	r3, r1, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	4631      	mov	r1, r6
 8002e74:	f7fd f9ac 	bl	80001d0 <__aeabi_uldivmod>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002e80:	fba3 1302 	umull	r1, r3, r3, r2
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	2164      	movs	r1, #100	; 0x64
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	3332      	adds	r3, #50	; 0x32
 8002e92:	4a2d      	ldr	r2, [pc, #180]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9e:	4498      	add	r8, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	469b      	mov	fp, r3
 8002ea4:	f04f 0c00 	mov.w	ip, #0
 8002ea8:	46d9      	mov	r9, fp
 8002eaa:	46e2      	mov	sl, ip
 8002eac:	eb19 0309 	adds.w	r3, r9, r9
 8002eb0:	eb4a 040a 	adc.w	r4, sl, sl
 8002eb4:	4699      	mov	r9, r3
 8002eb6:	46a2      	mov	sl, r4
 8002eb8:	eb19 090b 	adds.w	r9, r9, fp
 8002ebc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ecc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ed0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ed4:	4689      	mov	r9, r1
 8002ed6:	4692      	mov	sl, r2
 8002ed8:	eb1b 0509 	adds.w	r5, fp, r9
 8002edc:	eb4c 060a 	adc.w	r6, ip, sl
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	f04f 0300 	mov.w	r3, #0
 8002eee:	f04f 0400 	mov.w	r4, #0
 8002ef2:	0094      	lsls	r4, r2, #2
 8002ef4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ef8:	008b      	lsls	r3, r1, #2
 8002efa:	461a      	mov	r2, r3
 8002efc:	4623      	mov	r3, r4
 8002efe:	4628      	mov	r0, r5
 8002f00:	4631      	mov	r1, r6
 8002f02:	f7fd f965 	bl	80001d0 <__aeabi_uldivmod>
 8002f06:	4603      	mov	r3, r0
 8002f08:	460c      	mov	r4, r1
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2164      	movs	r1, #100	; 0x64
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	3332      	adds	r3, #50	; 0x32
 8002f20:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <UART_SetConfig+0x6f4>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	f003 020f 	and.w	r2, r3, #15
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4442      	add	r2, r8
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	e7ff      	b.n	8002f36 <UART_SetConfig+0x6e2>
 8002f36:	bf00      	nop
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40011400 	.word	0x40011400
 8002f48:	51eb851f 	.word	0x51eb851f

08002f4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f62:	f3ef 8305 	mrs	r3, IPSR
 8002f66:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f72:	607b      	str	r3, [r7, #4]
  return(result);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f7e:	603b      	str	r3, [r7, #0]
  return(result);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <osKernelInitialize+0x3a>
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <osKernelInitialize+0x64>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d103      	bne.n	8002f96 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f8e:	f06f 0305 	mvn.w	r3, #5
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	e00c      	b.n	8002fb0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <osKernelInitialize+0x64>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <osKernelInitialize+0x64>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e002      	b.n	8002fb0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	2000027c 	.word	0x2000027c

08002fc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fca:	f3ef 8305 	mrs	r3, IPSR
 8002fce:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fda:	607b      	str	r3, [r7, #4]
  return(result);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8002fe6:	603b      	str	r3, [r7, #0]
  return(result);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d007      	beq.n	8002ffe <osKernelStart+0x3a>
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <osKernelStart+0x68>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d103      	bne.n	8002ffe <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ff6:	f06f 0305 	mvn.w	r3, #5
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e010      	b.n	8003020 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <osKernelStart+0x68>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d109      	bne.n	800301a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003006:	f7ff ffa1 	bl	8002f4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <osKernelStart+0x68>)
 800300c:	2202      	movs	r2, #2
 800300e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003010:	f001 f870 	bl	80040f4 <vTaskStartScheduler>
      stat = osOK;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	e002      	b.n	8003020 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003020:	68fb      	ldr	r3, [r7, #12]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000027c 	.word	0x2000027c

08003030 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b090      	sub	sp, #64	; 0x40
 8003034:	af04      	add	r7, sp, #16
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003040:	f3ef 8305 	mrs	r3, IPSR
 8003044:	61fb      	str	r3, [r7, #28]
  return(result);
 8003046:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 808f 	bne.w	800316c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
 8003052:	61bb      	str	r3, [r7, #24]
  return(result);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800305a:	f3ef 8311 	mrs	r3, BASEPRI
 800305e:	617b      	str	r3, [r7, #20]
  return(result);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <osThreadNew+0x3e>
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <osThreadNew+0x148>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d07e      	beq.n	800316c <osThreadNew+0x13c>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d07b      	beq.n	800316c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003078:	2318      	movs	r3, #24
 800307a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800307c:	2300      	movs	r3, #0
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d045      	beq.n	8003118 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <osThreadNew+0x6a>
        name = attr->name;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <osThreadNew+0x90>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2b38      	cmp	r3, #56	; 0x38
 80030b2:	d805      	bhi.n	80030c0 <osThreadNew+0x90>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <osThreadNew+0x94>
        return (NULL);
 80030c0:	2300      	movs	r3, #0
 80030c2:	e054      	b.n	800316e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <osThreadNew+0xca>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b5b      	cmp	r3, #91	; 0x5b
 80030e2:	d90a      	bls.n	80030fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d006      	beq.n	80030fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <osThreadNew+0xca>
        mem = 1;
 80030f4:	2301      	movs	r3, #1
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	e010      	b.n	800311c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10c      	bne.n	800311c <osThreadNew+0xec>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <osThreadNew+0xec>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <osThreadNew+0xec>
          mem = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	e001      	b.n	800311c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d110      	bne.n	8003144 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800312a:	9202      	str	r2, [sp, #8]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fe09 	bl	8003d50 <xTaskCreateStatic>
 800313e:	4603      	mov	r3, r0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	e013      	b.n	800316c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d110      	bne.n	800316c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	b29a      	uxth	r2, r3
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fe51 	bl	8003e04 <xTaskCreate>
 8003162:	4603      	mov	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d001      	beq.n	800316c <osThreadNew+0x13c>
          hTask = NULL;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800316c:	693b      	ldr	r3, [r7, #16]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3730      	adds	r7, #48	; 0x30
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000027c 	.word	0x2000027c

0800317c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003184:	f3ef 8305 	mrs	r3, IPSR
 8003188:	613b      	str	r3, [r7, #16]
  return(result);
 800318a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	60fb      	str	r3, [r7, #12]
  return(result);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800319c:	f3ef 8311 	mrs	r3, BASEPRI
 80031a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <osDelay+0x3c>
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <osDelay+0x58>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d103      	bne.n	80031b8 <osDelay+0x3c>
    stat = osErrorISR;
 80031b0:	f06f 0305 	mvn.w	r3, #5
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e007      	b.n	80031c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ff62 	bl	800408c <vTaskDelay>
    }
  }

  return (stat);
 80031c8:	697b      	ldr	r3, [r7, #20]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	2000027c 	.word	0x2000027c

080031d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <vApplicationGetIdleTaskMemory+0x2c>)
 80031e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <vApplicationGetIdleTaskMemory+0x30>)
 80031ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000280 	.word	0x20000280
 8003208:	200002dc 	.word	0x200002dc

0800320c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a07      	ldr	r2, [pc, #28]	; (8003238 <vApplicationGetTimerTaskMemory+0x2c>)
 800321c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4a06      	ldr	r2, [pc, #24]	; (800323c <vApplicationGetTimerTaskMemory+0x30>)
 8003222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	200004dc 	.word	0x200004dc
 800323c:	20000538 	.word	0x20000538

08003240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f103 0208 	add.w	r2, r3, #8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 0208 	add.w	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f103 0208 	add.w	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d103      	bne.n	8003302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e00c      	b.n	800331c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3308      	adds	r3, #8
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e002      	b.n	8003310 <vListInsert+0x2e>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d2f6      	bcs.n	800330a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6852      	ldr	r2, [r2, #4]
 8003374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d103      	bne.n	8003388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	e7fe      	b.n	80033ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80033d0:	f002 f814 	bl	80053fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	68f9      	ldr	r1, [r7, #12]
 80033de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	3b01      	subs	r3, #1
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	22ff      	movs	r2, #255	; 0xff
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	22ff      	movs	r2, #255	; 0xff
 800341c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d114      	bne.n	8003450 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d01a      	beq.n	8003464 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	3310      	adds	r3, #16
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f8de 	bl	80045f4 <xTaskRemoveFromEventList>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <xQueueGenericReset+0xcc>)
 8003440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	e009      	b.n	8003464 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fef3 	bl	8003240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3324      	adds	r3, #36	; 0x24
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff feee 	bl	8003240 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003464:	f001 fff8 	bl	8005458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003468:	2301      	movs	r3, #1
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08e      	sub	sp, #56	; 0x38
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <xQueueGenericCreateStatic+0x28>
 800348c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003490:	f383 8811 	msr	BASEPRI, r3
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
 800349e:	e7fe      	b.n	800349e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <xQueueGenericCreateStatic+0x42>
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	f383 8811 	msr	BASEPRI, r3
 80034ae:	f3bf 8f6f 	isb	sy
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e7fe      	b.n	80034b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <xQueueGenericCreateStatic+0x4e>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <xQueueGenericCreateStatic+0x52>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <xQueueGenericCreateStatic+0x54>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <xQueueGenericCreateStatic+0x6c>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <xQueueGenericCreateStatic+0x78>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <xQueueGenericCreateStatic+0x7c>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <xQueueGenericCreateStatic+0x7e>
 80034f4:	2300      	movs	r3, #0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <xQueueGenericCreateStatic+0x96>
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	61fb      	str	r3, [r7, #28]
 800350c:	e7fe      	b.n	800350c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800350e:	2350      	movs	r3, #80	; 0x50
 8003510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b50      	cmp	r3, #80	; 0x50
 8003516:	d009      	beq.n	800352c <xQueueGenericCreateStatic+0xb4>
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e7fe      	b.n	800352a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800352c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00d      	beq.n	8003554 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003540:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f805 	bl	800355e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003556:	4618      	mov	r0, r3
 8003558:	3730      	adds	r7, #48	; 0x30
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e002      	b.n	8003580 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800358c:	2101      	movs	r1, #1
 800358e:	69b8      	ldr	r0, [r7, #24]
 8003590:	f7ff ff0a 	bl	80033a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035b2:	2300      	movs	r3, #0
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <xQueueGenericSend+0x30>
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d2:	e7fe      	b.n	80035d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x3e>
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <xQueueGenericSend+0x42>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <xQueueGenericSend+0x44>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <xQueueGenericSend+0x5c>
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
 80035fe:	e7fe      	b.n	80035fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d103      	bne.n	800360e <xQueueGenericSend+0x6a>
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <xQueueGenericSend+0x6e>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueGenericSend+0x70>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <xQueueGenericSend+0x88>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	e7fe      	b.n	800362a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800362c:	f001 f998 	bl	8004960 <xTaskGetSchedulerState>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <xQueueGenericSend+0x98>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <xQueueGenericSend+0x9c>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <xQueueGenericSend+0x9e>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <xQueueGenericSend+0xb6>
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e7fe      	b.n	8003658 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800365a:	f001 fecf 	bl	80053fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <xQueueGenericSend+0xcc>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d129      	bne.n	80036c4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003676:	f000 f9ff 	bl	8003a78 <prvCopyDataToQueue>
 800367a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d010      	beq.n	80036a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	3324      	adds	r3, #36	; 0x24
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ffb3 	bl	80045f4 <xTaskRemoveFromEventList>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003694:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <xQueueGenericSend+0x1f0>)
 8003696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	e00a      	b.n	80036bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d007      	beq.n	80036bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <xQueueGenericSend+0x1f0>)
 80036ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036bc:	f001 fecc 	bl	8005458 <vPortExitCritical>
				return pdPASS;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e063      	b.n	800378c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d103      	bne.n	80036d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036ca:	f001 fec5 	bl	8005458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e05c      	b.n	800378c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d106      	bne.n	80036e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ffeb 	bl	80046b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036e6:	f001 feb7 	bl	8005458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036ea:	f000 fd67 	bl	80041bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ee:	f001 fe85 	bl	80053fc <vPortEnterCritical>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036f8:	b25b      	sxtb	r3, r3
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d103      	bne.n	8003708 <xQueueGenericSend+0x164>
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800370e:	b25b      	sxtb	r3, r3
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d103      	bne.n	800371e <xQueueGenericSend+0x17a>
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800371e:	f001 fe9b 	bl	8005458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003722:	1d3a      	adds	r2, r7, #4
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ffda 	bl	80046e4 <xTaskCheckForTimeOut>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d124      	bne.n	8003780 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003738:	f000 fa96 	bl	8003c68 <prvIsQueueFull>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d018      	beq.n	8003774 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	3310      	adds	r3, #16
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f000 ff04 	bl	8004558 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003752:	f000 fa21 	bl	8003b98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003756:	f000 fd3f 	bl	80041d8 <xTaskResumeAll>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	f47f af7c 	bne.w	800365a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <xQueueGenericSend+0x1f0>)
 8003764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	e772      	b.n	800365a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003776:	f000 fa0f 	bl	8003b98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800377a:	f000 fd2d 	bl	80041d8 <xTaskResumeAll>
 800377e:	e76c      	b.n	800365a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003782:	f000 fa09 	bl	8003b98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003786:	f000 fd27 	bl	80041d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800378a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800378c:	4618      	mov	r0, r3
 800378e:	3738      	adds	r7, #56	; 0x38
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <xQueueGenericSendFromISR+0x2c>
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e7fe      	b.n	80037c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSendFromISR+0x3a>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueGenericSendFromISR+0x3e>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueGenericSendFromISR+0x40>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <xQueueGenericSendFromISR+0x58>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	e7fe      	b.n	80037ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSendFromISR+0x66>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSendFromISR+0x6a>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSendFromISR+0x6c>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <xQueueGenericSendFromISR+0x84>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e7fe      	b.n	800381a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800381c:	f001 feca 	bl	80055b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003820:	f3ef 8211 	mrs	r2, BASEPRI
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	61ba      	str	r2, [r7, #24]
 8003836:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003838:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <xQueueGenericSendFromISR+0xb6>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d12c      	bne.n	80038a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385e:	f000 f90b 	bl	8003a78 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003862:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d112      	bne.n	8003892 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d016      	beq.n	80038a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	3324      	adds	r3, #36	; 0x24
 8003878:	4618      	mov	r0, r3
 800387a:	f000 febb 	bl	80045f4 <xTaskRemoveFromEventList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e007      	b.n	80038a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003896:	3301      	adds	r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	b25a      	sxtb	r2, r3
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038a2:	2301      	movs	r3, #1
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80038a6:	e001      	b.n	80038ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3738      	adds	r7, #56	; 0x38
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <xQueueReceive+0x2e>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	623b      	str	r3, [r7, #32]
 80038ec:	e7fe      	b.n	80038ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <xQueueReceive+0x3c>
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <xQueueReceive+0x40>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <xQueueReceive+0x42>
 8003900:	2300      	movs	r3, #0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <xQueueReceive+0x5a>
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	e7fe      	b.n	8003918 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800391a:	f001 f821 	bl	8004960 <xTaskGetSchedulerState>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <xQueueReceive+0x6a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <xQueueReceive+0x6e>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueReceive+0x70>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <xQueueReceive+0x88>
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	e7fe      	b.n	8003946 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003948:	f001 fd58 	bl	80053fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01f      	beq.n	8003998 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800395c:	f000 f8f6 	bl	8003b4c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1e5a      	subs	r2, r3, #1
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00f      	beq.n	8003990 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	3310      	adds	r3, #16
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fe3d 	bl	80045f4 <xTaskRemoveFromEventList>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003980:	4b3c      	ldr	r3, [pc, #240]	; (8003a74 <xQueueReceive+0x1b4>)
 8003982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003990:	f001 fd62 	bl	8005458 <vPortExitCritical>
				return pdPASS;
 8003994:	2301      	movs	r3, #1
 8003996:	e069      	b.n	8003a6c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800399e:	f001 fd5b 	bl	8005458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e062      	b.n	8003a6c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fe81 	bl	80046b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ba:	f001 fd4d 	bl	8005458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039be:	f000 fbfd 	bl	80041bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039c2:	f001 fd1b 	bl	80053fc <vPortEnterCritical>
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d103      	bne.n	80039dc <xQueueReceive+0x11c>
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039e2:	b25b      	sxtb	r3, r3
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d103      	bne.n	80039f2 <xQueueReceive+0x132>
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039f2:	f001 fd31 	bl	8005458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039f6:	1d3a      	adds	r2, r7, #4
 80039f8:	f107 0310 	add.w	r3, r7, #16
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fe70 	bl	80046e4 <xTaskCheckForTimeOut>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d123      	bne.n	8003a52 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a0c:	f000 f916 	bl	8003c3c <prvIsQueueEmpty>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	3324      	adds	r3, #36	; 0x24
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd9a 	bl	8004558 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a26:	f000 f8b7 	bl	8003b98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a2a:	f000 fbd5 	bl	80041d8 <xTaskResumeAll>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d189      	bne.n	8003948 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <xQueueReceive+0x1b4>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	e780      	b.n	8003948 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a48:	f000 f8a6 	bl	8003b98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a4c:	f000 fbc4 	bl	80041d8 <xTaskResumeAll>
 8003a50:	e77a      	b.n	8003948 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a54:	f000 f8a0 	bl	8003b98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a58:	f000 fbbe 	bl	80041d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5e:	f000 f8ed 	bl	8003c3c <prvIsQueueEmpty>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f43f af6f 	beq.w	8003948 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3730      	adds	r7, #48	; 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	e000ed04 	.word	0xe000ed04

08003a78 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d14d      	bne.n	8003b3a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff7a 	bl	800499c <xTaskPriorityDisinherit>
 8003aa8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	e043      	b.n	8003b3a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d119      	bne.n	8003aec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6858      	ldr	r0, [r3, #4]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	f001 ffbc 	bl	8005a40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	441a      	add	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d32b      	bcc.n	8003b3a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	e026      	b.n	8003b3a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68d8      	ldr	r0, [r3, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	461a      	mov	r2, r3
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	f001 ffa2 	bl	8005a40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	425b      	negs	r3, r3
 8003b06:	441a      	add	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d207      	bcs.n	8003b28 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	425b      	negs	r3, r3
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d105      	bne.n	8003b3a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003b42:	697b      	ldr	r3, [r7, #20]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d018      	beq.n	8003b90 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	441a      	add	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d303      	bcc.n	8003b80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68d9      	ldr	r1, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6838      	ldr	r0, [r7, #0]
 8003b8c:	f001 ff58 	bl	8005a40 <memcpy>
	}
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ba0:	f001 fc2c 	bl	80053fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003baa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bac:	e011      	b.n	8003bd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3324      	adds	r3, #36	; 0x24
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fd1a 	bl	80045f4 <xTaskRemoveFromEventList>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003bc6:	f000 fded 	bl	80047a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	dce9      	bgt.n	8003bae <prvUnlockQueue+0x16>
 8003bda:	e000      	b.n	8003bde <prvUnlockQueue+0x46>
					break;
 8003bdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003be6:	f001 fc37 	bl	8005458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003bea:	f001 fc07 	bl	80053fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bf6:	e011      	b.n	8003c1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d012      	beq.n	8003c26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3310      	adds	r3, #16
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fcf5 	bl	80045f4 <xTaskRemoveFromEventList>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c10:	f000 fdc8 	bl	80047a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	dce9      	bgt.n	8003bf8 <prvUnlockQueue+0x60>
 8003c24:	e000      	b.n	8003c28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	22ff      	movs	r2, #255	; 0xff
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c30:	f001 fc12 	bl	8005458 <vPortExitCritical>
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c44:	f001 fbda 	bl	80053fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e001      	b.n	8003c5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c5a:	f001 fbfd 	bl	8005458 <vPortExitCritical>

	return xReturn;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c70:	f001 fbc4 	bl	80053fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d102      	bne.n	8003c86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e001      	b.n	8003c8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c8a:	f001 fbe5 	bl	8005458 <vPortExitCritical>

	return xReturn;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e014      	b.n	8003cd2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <vQueueAddToRegistry+0x4c>)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cb4:	490b      	ldr	r1, [pc, #44]	; (8003ce4 <vQueueAddToRegistry+0x4c>)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003cbe:	4a09      	ldr	r2, [pc, #36]	; (8003ce4 <vQueueAddToRegistry+0x4c>)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003cca:	e005      	b.n	8003cd8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b07      	cmp	r3, #7
 8003cd6:	d9e7      	bls.n	8003ca8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	20004bd8 	.word	0x20004bd8

08003ce8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003cf8:	f001 fb80 	bl	80053fc <vPortEnterCritical>
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d02:	b25b      	sxtb	r3, r3
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d103      	bne.n	8003d12 <vQueueWaitForMessageRestricted+0x2a>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d18:	b25b      	sxtb	r3, r3
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d103      	bne.n	8003d28 <vQueueWaitForMessageRestricted+0x40>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d28:	f001 fb96 	bl	8005458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	3324      	adds	r3, #36	; 0x24
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fc2f 	bl	80045a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7ff ff28 	bl	8003b98 <prvUnlockQueue>
	}
 8003d48:	bf00      	nop
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	; 0x38
 8003d54:	af04      	add	r7, sp, #16
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <xTaskCreateStatic+0x28>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	e7fe      	b.n	8003d76 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <xTaskCreateStatic+0x42>
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e7fe      	b.n	8003d90 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d92:	235c      	movs	r3, #92	; 0x5c
 8003d94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b5c      	cmp	r3, #92	; 0x5c
 8003d9a:	d009      	beq.n	8003db0 <xTaskCreateStatic+0x60>
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	e7fe      	b.n	8003dae <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003db0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01e      	beq.n	8003df6 <xTaskCreateStatic+0xa6>
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01b      	beq.n	8003df6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9303      	str	r3, [sp, #12]
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	9302      	str	r3, [sp, #8]
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f850 	bl	8003e8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003df0:	f000 f8dc 	bl	8003fac <prvAddNewTaskToReadyList>
 8003df4:	e001      	b.n	8003dfa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003dfa:	697b      	ldr	r3, [r7, #20]
	}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3728      	adds	r7, #40	; 0x28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	; 0x30
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f001 fc09 	bl	8005630 <pvPortMalloc>
 8003e1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e26:	205c      	movs	r0, #92	; 0x5c
 8003e28:	f001 fc02 	bl	8005630 <pvPortMalloc>
 8003e2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
 8003e3a:	e005      	b.n	8003e48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e3c:	6978      	ldr	r0, [r7, #20]
 8003e3e:	f001 fcb9 	bl	80057b4 <vPortFree>
 8003e42:	e001      	b.n	8003e48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d017      	beq.n	8003e7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9303      	str	r3, [sp, #12]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	9302      	str	r3, [sp, #8]
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f80e 	bl	8003e8e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e72:	69f8      	ldr	r0, [r7, #28]
 8003e74:	f000 f89a 	bl	8003fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	e002      	b.n	8003e84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e84:	69bb      	ldr	r3, [r7, #24]
	}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b088      	sub	sp, #32
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	21a5      	movs	r1, #165	; 0xa5
 8003ea8:	f001 fdd5 	bl	8005a56 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f023 0307 	bic.w	r3, r3, #7
 8003ec4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <prvInitialiseNewTask+0x56>
 8003ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e7fe      	b.n	8003ee2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01f      	beq.n	8003f2a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e012      	b.n	8003f16 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	7819      	ldrb	r1, [r3, #0]
 8003ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	3334      	adds	r3, #52	; 0x34
 8003f00:	460a      	mov	r2, r1
 8003f02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b0f      	cmp	r3, #15
 8003f1a:	d9e9      	bls.n	8003ef0 <prvInitialiseNewTask+0x62>
 8003f1c:	e000      	b.n	8003f20 <prvInitialiseNewTask+0x92>
			{
				break;
 8003f1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f28:	e003      	b.n	8003f32 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	2b37      	cmp	r3, #55	; 0x37
 8003f36:	d901      	bls.n	8003f3c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f38:	2337      	movs	r3, #55	; 0x37
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f994 	bl	8003280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	3318      	adds	r3, #24
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f98f 	bl	8003280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	68f9      	ldr	r1, [r7, #12]
 8003f8a:	69b8      	ldr	r0, [r7, #24]
 8003f8c:	f001 f90c 	bl	80051a8 <pxPortInitialiseStack>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003fb4:	f001 fa22 	bl	80053fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <prvAddNewTaskToReadyList+0xc4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	4a2c      	ldr	r2, [pc, #176]	; (8004070 <prvAddNewTaskToReadyList+0xc4>)
 8003fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fc2:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <prvAddNewTaskToReadyList+0xc8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fca:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <prvAddNewTaskToReadyList+0xc8>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <prvAddNewTaskToReadyList+0xc4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d110      	bne.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fd8:	f000 fc08 	bl	80047ec <prvInitialiseTaskLists>
 8003fdc:	e00d      	b.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <prvAddNewTaskToReadyList+0xcc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fe6:	4b23      	ldr	r3, [pc, #140]	; (8004074 <prvAddNewTaskToReadyList+0xc8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d802      	bhi.n	8003ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	; (8004074 <prvAddNewTaskToReadyList+0xc8>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <prvAddNewTaskToReadyList+0xd0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a1e      	ldr	r2, [pc, #120]	; (800407c <prvAddNewTaskToReadyList+0xd0>)
 8004002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <prvAddNewTaskToReadyList+0xd0>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <prvAddNewTaskToReadyList+0xd4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d903      	bls.n	8004020 <prvAddNewTaskToReadyList+0x74>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <prvAddNewTaskToReadyList+0xd4>)
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4a15      	ldr	r2, [pc, #84]	; (8004084 <prvAddNewTaskToReadyList+0xd8>)
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f7ff f92f 	bl	800329a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800403c:	f001 fa0c 	bl	8005458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <prvAddNewTaskToReadyList+0xcc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <prvAddNewTaskToReadyList+0xc8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	429a      	cmp	r2, r3
 8004054:	d207      	bcs.n	8004066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <prvAddNewTaskToReadyList+0xdc>)
 8004058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000e0c 	.word	0x20000e0c
 8004074:	20000938 	.word	0x20000938
 8004078:	20000e18 	.word	0x20000e18
 800407c:	20000e28 	.word	0x20000e28
 8004080:	20000e14 	.word	0x20000e14
 8004084:	2000093c 	.word	0x2000093c
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800409e:	4b13      	ldr	r3, [pc, #76]	; (80040ec <vTaskDelay+0x60>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <vTaskDelay+0x2e>
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	e7fe      	b.n	80040b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80040ba:	f000 f87f 	bl	80041bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040be:	2100      	movs	r1, #0
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fcd7 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040c6:	f000 f887 	bl	80041d8 <xTaskResumeAll>
 80040ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <vTaskDelay+0x64>)
 80040d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000e34 	.word	0x20000e34
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004102:	463a      	mov	r2, r7
 8004104:	1d39      	adds	r1, r7, #4
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff f864 	bl	80031d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004110:	6839      	ldr	r1, [r7, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	9202      	str	r2, [sp, #8]
 8004118:	9301      	str	r3, [sp, #4]
 800411a:	2300      	movs	r3, #0
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2300      	movs	r3, #0
 8004120:	460a      	mov	r2, r1
 8004122:	4920      	ldr	r1, [pc, #128]	; (80041a4 <vTaskStartScheduler+0xb0>)
 8004124:	4820      	ldr	r0, [pc, #128]	; (80041a8 <vTaskStartScheduler+0xb4>)
 8004126:	f7ff fe13 	bl	8003d50 <xTaskCreateStatic>
 800412a:	4602      	mov	r2, r0
 800412c:	4b1f      	ldr	r3, [pc, #124]	; (80041ac <vTaskStartScheduler+0xb8>)
 800412e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004130:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <vTaskStartScheduler+0xb8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004138:	2301      	movs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	e001      	b.n	8004142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004148:	f000 fce8 	bl	8004b1c <xTimerCreateTimerTask>
 800414c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d115      	bne.n	8004180 <vTaskStartScheduler+0x8c>
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <vTaskStartScheduler+0xbc>)
 8004168:	f04f 32ff 	mov.w	r2, #4294967295
 800416c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800416e:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <vTaskStartScheduler+0xc0>)
 8004170:	2201      	movs	r2, #1
 8004172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <vTaskStartScheduler+0xc4>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800417a:	f001 f8a1 	bl	80052c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800417e:	e00d      	b.n	800419c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d109      	bne.n	800419c <vTaskStartScheduler+0xa8>
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e7fe      	b.n	800419a <vTaskStartScheduler+0xa6>
}
 800419c:	bf00      	nop
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	08005b70 	.word	0x08005b70
 80041a8:	080047bd 	.word	0x080047bd
 80041ac:	20000e30 	.word	0x20000e30
 80041b0:	20000e2c 	.word	0x20000e2c
 80041b4:	20000e18 	.word	0x20000e18
 80041b8:	20000e10 	.word	0x20000e10

080041bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <vTaskSuspendAll+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <vTaskSuspendAll+0x18>)
 80041c8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000e34 	.word	0x20000e34

080041d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041e6:	4b41      	ldr	r3, [pc, #260]	; (80042ec <xTaskResumeAll+0x114>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <xTaskResumeAll+0x2a>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	e7fe      	b.n	8004200 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004202:	f001 f8fb 	bl	80053fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004206:	4b39      	ldr	r3, [pc, #228]	; (80042ec <xTaskResumeAll+0x114>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3b01      	subs	r3, #1
 800420c:	4a37      	ldr	r2, [pc, #220]	; (80042ec <xTaskResumeAll+0x114>)
 800420e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004210:	4b36      	ldr	r3, [pc, #216]	; (80042ec <xTaskResumeAll+0x114>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d162      	bne.n	80042de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <xTaskResumeAll+0x118>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d05e      	beq.n	80042de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004220:	e02f      	b.n	8004282 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <xTaskResumeAll+0x11c>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3318      	adds	r3, #24
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f890 	bl	8003354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f88b 	bl	8003354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004242:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <xTaskResumeAll+0x120>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d903      	bls.n	8004252 <xTaskResumeAll+0x7a>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <xTaskResumeAll+0x120>)
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4a27      	ldr	r2, [pc, #156]	; (80042fc <xTaskResumeAll+0x124>)
 8004260:	441a      	add	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3304      	adds	r3, #4
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7ff f816 	bl	800329a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <xTaskResumeAll+0x128>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <xTaskResumeAll+0x12c>)
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <xTaskResumeAll+0x11c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1cb      	bne.n	8004222 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004290:	f000 fb46 	bl	8004920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004294:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <xTaskResumeAll+0x130>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042a0:	f000 f846 	bl	8004330 <xTaskIncrementTick>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80042aa:	4b16      	ldr	r3, [pc, #88]	; (8004304 <xTaskResumeAll+0x12c>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f1      	bne.n	80042a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <xTaskResumeAll+0x130>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <xTaskResumeAll+0x12c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <xTaskResumeAll+0x134>)
 80042d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042de:	f001 f8bb 	bl	8005458 <vPortExitCritical>

	return xAlreadyYielded;
 80042e2:	68bb      	ldr	r3, [r7, #8]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000e34 	.word	0x20000e34
 80042f0:	20000e0c 	.word	0x20000e0c
 80042f4:	20000dcc 	.word	0x20000dcc
 80042f8:	20000e14 	.word	0x20000e14
 80042fc:	2000093c 	.word	0x2000093c
 8004300:	20000938 	.word	0x20000938
 8004304:	20000e20 	.word	0x20000e20
 8004308:	20000e1c 	.word	0x20000e1c
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <xTaskGetTickCount+0x1c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800431c:	687b      	ldr	r3, [r7, #4]
}
 800431e:	4618      	mov	r0, r3
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000e10 	.word	0x20000e10

08004330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433a:	4b4e      	ldr	r3, [pc, #312]	; (8004474 <xTaskIncrementTick+0x144>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 8088 	bne.w	8004454 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004344:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <xTaskIncrementTick+0x148>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3301      	adds	r3, #1
 800434a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800434c:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <xTaskIncrementTick+0x148>)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d11f      	bne.n	8004398 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004358:	4b48      	ldr	r3, [pc, #288]	; (800447c <xTaskIncrementTick+0x14c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <xTaskIncrementTick+0x46>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	e7fe      	b.n	8004374 <xTaskIncrementTick+0x44>
 8004376:	4b41      	ldr	r3, [pc, #260]	; (800447c <xTaskIncrementTick+0x14c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	4b40      	ldr	r3, [pc, #256]	; (8004480 <xTaskIncrementTick+0x150>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3e      	ldr	r2, [pc, #248]	; (800447c <xTaskIncrementTick+0x14c>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4a3e      	ldr	r2, [pc, #248]	; (8004480 <xTaskIncrementTick+0x150>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <xTaskIncrementTick+0x154>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <xTaskIncrementTick+0x154>)
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	f000 fac4 	bl	8004920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <xTaskIncrementTick+0x158>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d349      	bcc.n	8004436 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <xTaskIncrementTick+0x14c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d104      	bne.n	80043b6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ac:	4b36      	ldr	r3, [pc, #216]	; (8004488 <xTaskIncrementTick+0x158>)
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	601a      	str	r2, [r3, #0]
					break;
 80043b4:	e03f      	b.n	8004436 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b6:	4b31      	ldr	r3, [pc, #196]	; (800447c <xTaskIncrementTick+0x14c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d203      	bcs.n	80043d6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043ce:	4a2e      	ldr	r2, [pc, #184]	; (8004488 <xTaskIncrementTick+0x158>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043d4:	e02f      	b.n	8004436 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe ffba 	bl	8003354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	3318      	adds	r3, #24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe ffb1 	bl	8003354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4b25      	ldr	r3, [pc, #148]	; (800448c <xTaskIncrementTick+0x15c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d903      	bls.n	8004406 <xTaskIncrementTick+0xd6>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a22      	ldr	r2, [pc, #136]	; (800448c <xTaskIncrementTick+0x15c>)
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <xTaskIncrementTick+0x160>)
 8004414:	441a      	add	r2, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3304      	adds	r3, #4
 800441a:	4619      	mov	r1, r3
 800441c:	4610      	mov	r0, r2
 800441e:	f7fe ff3c 	bl	800329a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <xTaskIncrementTick+0x164>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	429a      	cmp	r2, r3
 800442e:	d3b8      	bcc.n	80043a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004434:	e7b5      	b.n	80043a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004436:	4b17      	ldr	r3, [pc, #92]	; (8004494 <xTaskIncrementTick+0x164>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4914      	ldr	r1, [pc, #80]	; (8004490 <xTaskIncrementTick+0x160>)
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d907      	bls.n	800445e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800444e:	2301      	movs	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e004      	b.n	800445e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004454:	4b10      	ldr	r3, [pc, #64]	; (8004498 <xTaskIncrementTick+0x168>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <xTaskIncrementTick+0x168>)
 800445c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <xTaskIncrementTick+0x16c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800446a:	697b      	ldr	r3, [r7, #20]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000e34 	.word	0x20000e34
 8004478:	20000e10 	.word	0x20000e10
 800447c:	20000dc4 	.word	0x20000dc4
 8004480:	20000dc8 	.word	0x20000dc8
 8004484:	20000e24 	.word	0x20000e24
 8004488:	20000e2c 	.word	0x20000e2c
 800448c:	20000e14 	.word	0x20000e14
 8004490:	2000093c 	.word	0x2000093c
 8004494:	20000938 	.word	0x20000938
 8004498:	20000e1c 	.word	0x20000e1c
 800449c:	20000e20 	.word	0x20000e20

080044a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <vTaskSwitchContext+0xa4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <vTaskSwitchContext+0xa8>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044b4:	e040      	b.n	8004538 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <vTaskSwitchContext+0xa8>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044bc:	4b23      	ldr	r3, [pc, #140]	; (800454c <vTaskSwitchContext+0xac>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e00f      	b.n	80044e4 <vTaskSwitchContext+0x44>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <vTaskSwitchContext+0x3e>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e7fe      	b.n	80044dc <vTaskSwitchContext+0x3c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	491a      	ldr	r1, [pc, #104]	; (8004550 <vTaskSwitchContext+0xb0>)
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0e5      	beq.n	80044c4 <vTaskSwitchContext+0x24>
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <vTaskSwitchContext+0xb0>)
 8004504:	4413      	add	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3308      	adds	r3, #8
 800451a:	429a      	cmp	r2, r3
 800451c:	d104      	bne.n	8004528 <vTaskSwitchContext+0x88>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	4a09      	ldr	r2, [pc, #36]	; (8004554 <vTaskSwitchContext+0xb4>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4a06      	ldr	r2, [pc, #24]	; (800454c <vTaskSwitchContext+0xac>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20000e34 	.word	0x20000e34
 8004548:	20000e20 	.word	0x20000e20
 800454c:	20000e14 	.word	0x20000e14
 8004550:	2000093c 	.word	0x2000093c
 8004554:	20000938 	.word	0x20000938

08004558 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <vTaskPlaceOnEventList+0x24>
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e7fe      	b.n	800457a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <vTaskPlaceOnEventList+0x44>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3318      	adds	r3, #24
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fe feac 	bl	80032e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800458a:	2101      	movs	r1, #1
 800458c:	6838      	ldr	r0, [r7, #0]
 800458e:	f000 fa71 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000938 	.word	0x20000938

080045a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <vTaskPlaceOnEventListRestricted+0x26>
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e7fe      	b.n	80045c4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <vTaskPlaceOnEventListRestricted+0x50>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3318      	adds	r3, #24
 80045cc:	4619      	mov	r1, r3
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f7fe fe63 	bl	800329a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f000 fa46 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
	}
 80045e8:	bf00      	nop
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000938 	.word	0x20000938

080045f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <xTaskRemoveFromEventList+0x2a>
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e7fe      	b.n	800461c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3318      	adds	r3, #24
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fe96 	bl	8003354 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004628:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <xTaskRemoveFromEventList+0xac>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11d      	bne.n	800466c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3304      	adds	r3, #4
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe fe8d 	bl	8003354 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <xTaskRemoveFromEventList+0xb0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d903      	bls.n	800464e <xTaskRemoveFromEventList+0x5a>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <xTaskRemoveFromEventList+0xb0>)
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <xTaskRemoveFromEventList+0xb4>)
 800465c:	441a      	add	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fe fe18 	bl	800329a <vListInsertEnd>
 800466a:	e005      	b.n	8004678 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3318      	adds	r3, #24
 8004670:	4619      	mov	r1, r3
 8004672:	480e      	ldr	r0, [pc, #56]	; (80046ac <xTaskRemoveFromEventList+0xb8>)
 8004674:	f7fe fe11 	bl	800329a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <xTaskRemoveFromEventList+0xbc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	429a      	cmp	r2, r3
 8004684:	d905      	bls.n	8004692 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004686:	2301      	movs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <xTaskRemoveFromEventList+0xc0>)
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e001      	b.n	8004696 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004696:	697b      	ldr	r3, [r7, #20]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000e34 	.word	0x20000e34
 80046a4:	20000e14 	.word	0x20000e14
 80046a8:	2000093c 	.word	0x2000093c
 80046ac:	20000dcc 	.word	0x20000dcc
 80046b0:	20000938 	.word	0x20000938
 80046b4:	20000e20 	.word	0x20000e20

080046b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <vTaskInternalSetTimeOutState+0x24>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <vTaskInternalSetTimeOutState+0x28>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000e24 	.word	0x20000e24
 80046e0:	20000e10 	.word	0x20000e10

080046e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <xTaskCheckForTimeOut+0x24>
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	e7fe      	b.n	8004706 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <xTaskCheckForTimeOut+0x3e>
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e7fe      	b.n	8004720 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004722:	f000 fe6b 	bl	80053fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <xTaskCheckForTimeOut+0xb8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d102      	bne.n	8004746 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	e023      	b.n	800478e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <xTaskCheckForTimeOut+0xbc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d007      	beq.n	8004762 <xTaskCheckForTimeOut+0x7e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800475c:	2301      	movs	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	e015      	b.n	800478e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	429a      	cmp	r2, r3
 800476a:	d20b      	bcs.n	8004784 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff9d 	bl	80046b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e004      	b.n	800478e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800478e:	f000 fe63 	bl	8005458 <vPortExitCritical>

	return xReturn;
 8004792:	69fb      	ldr	r3, [r7, #28]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000e10 	.word	0x20000e10
 80047a0:	20000e24 	.word	0x20000e24

080047a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <vTaskMissedYield+0x14>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000e20 	.word	0x20000e20

080047bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047c4:	f000 f852 	bl	800486c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <prvIdleTask+0x28>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d9f9      	bls.n	80047c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <prvIdleTask+0x2c>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047e0:	e7f0      	b.n	80047c4 <prvIdleTask+0x8>
 80047e2:	bf00      	nop
 80047e4:	2000093c 	.word	0x2000093c
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	e00c      	b.n	8004812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <prvInitialiseTaskLists+0x60>)
 8004804:	4413      	add	r3, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fd1a 	bl	8003240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3301      	adds	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b37      	cmp	r3, #55	; 0x37
 8004816:	d9ef      	bls.n	80047f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004818:	480d      	ldr	r0, [pc, #52]	; (8004850 <prvInitialiseTaskLists+0x64>)
 800481a:	f7fe fd11 	bl	8003240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800481e:	480d      	ldr	r0, [pc, #52]	; (8004854 <prvInitialiseTaskLists+0x68>)
 8004820:	f7fe fd0e 	bl	8003240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004824:	480c      	ldr	r0, [pc, #48]	; (8004858 <prvInitialiseTaskLists+0x6c>)
 8004826:	f7fe fd0b 	bl	8003240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800482a:	480c      	ldr	r0, [pc, #48]	; (800485c <prvInitialiseTaskLists+0x70>)
 800482c:	f7fe fd08 	bl	8003240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <prvInitialiseTaskLists+0x74>)
 8004832:	f7fe fd05 	bl	8003240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <prvInitialiseTaskLists+0x78>)
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <prvInitialiseTaskLists+0x64>)
 800483a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <prvInitialiseTaskLists+0x7c>)
 800483e:	4a05      	ldr	r2, [pc, #20]	; (8004854 <prvInitialiseTaskLists+0x68>)
 8004840:	601a      	str	r2, [r3, #0]
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000093c 	.word	0x2000093c
 8004850:	20000d9c 	.word	0x20000d9c
 8004854:	20000db0 	.word	0x20000db0
 8004858:	20000dcc 	.word	0x20000dcc
 800485c:	20000de0 	.word	0x20000de0
 8004860:	20000df8 	.word	0x20000df8
 8004864:	20000dc4 	.word	0x20000dc4
 8004868:	20000dc8 	.word	0x20000dc8

0800486c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004872:	e019      	b.n	80048a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004874:	f000 fdc2 	bl	80053fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <prvCheckTasksWaitingTermination+0x4c>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fd65 	bl	8003354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <prvCheckTasksWaitingTermination+0x50>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3b01      	subs	r3, #1
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <prvCheckTasksWaitingTermination+0x50>)
 8004892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 800489c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800489e:	f000 fddb 	bl	8005458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f80e 	bl	80048c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a8:	4b05      	ldr	r3, [pc, #20]	; (80048c0 <prvCheckTasksWaitingTermination+0x54>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e1      	bne.n	8004874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000de0 	.word	0x20000de0
 80048bc:	20000e0c 	.word	0x20000e0c
 80048c0:	20000df4 	.word	0x20000df4

080048c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d108      	bne.n	80048e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 ff6a 	bl	80057b4 <vPortFree>
				vPortFree( pxTCB );
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 ff67 	bl	80057b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048e6:	e017      	b.n	8004918 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d103      	bne.n	80048fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 ff5e 	bl	80057b4 <vPortFree>
	}
 80048f8:	e00e      	b.n	8004918 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004900:	2b02      	cmp	r3, #2
 8004902:	d009      	beq.n	8004918 <prvDeleteTCB+0x54>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	e7fe      	b.n	8004916 <prvDeleteTCB+0x52>
	}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvResetNextTaskUnblockTime+0x38>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvResetNextTaskUnblockTime+0x3c>)
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004938:	e008      	b.n	800494c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvResetNextTaskUnblockTime+0x38>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <prvResetNextTaskUnblockTime+0x3c>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000dc4 	.word	0x20000dc4
 800495c:	20000e2c 	.word	0x20000e2c

08004960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <xTaskGetSchedulerState+0x34>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800496e:	2301      	movs	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	e008      	b.n	8004986 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004974:	4b08      	ldr	r3, [pc, #32]	; (8004998 <xTaskGetSchedulerState+0x38>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800497c:	2302      	movs	r3, #2
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e001      	b.n	8004986 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004986:	687b      	ldr	r3, [r7, #4]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	20000e18 	.word	0x20000e18
 8004998:	20000e34 	.word	0x20000e34

0800499c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d054      	beq.n	8004a5c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049b2:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <xTaskPriorityDisinherit+0xcc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d009      	beq.n	80049d0 <xTaskPriorityDisinherit+0x34>
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e7fe      	b.n	80049ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <xTaskPriorityDisinherit+0x50>
 80049d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	60bb      	str	r3, [r7, #8]
 80049ea:	e7fe      	b.n	80049ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d02c      	beq.n	8004a5c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d128      	bne.n	8004a5c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fca0 	bl	8003354 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <xTaskPriorityDisinherit+0xd0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <xTaskPriorityDisinherit+0xa0>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <xTaskPriorityDisinherit+0xd0>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <xTaskPriorityDisinherit+0xd4>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe fc21 	bl	800329a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a5c:	697b      	ldr	r3, [r7, #20]
	}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000938 	.word	0x20000938
 8004a6c:	20000e14 	.word	0x20000e14
 8004a70:	2000093c 	.word	0x2000093c

08004a74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a7e:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fc62 	bl	8003354 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d10a      	bne.n	8004aae <prvAddCurrentTaskToDelayedList+0x3a>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4819      	ldr	r0, [pc, #100]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8004aa8:	f7fe fbf7 	bl	800329a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aac:	e026      	b.n	8004afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d209      	bcs.n	8004ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fe fc05 	bl	80032e2 <vListInsert>
}
 8004ad8:	e010      	b.n	8004afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7fe fbfb 	bl	80032e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d202      	bcs.n	8004afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20000e10 	.word	0x20000e10
 8004b08:	20000938 	.word	0x20000938
 8004b0c:	20000df8 	.word	0x20000df8
 8004b10:	20000dc8 	.word	0x20000dc8
 8004b14:	20000dc4 	.word	0x20000dc4
 8004b18:	20000e2c 	.word	0x20000e2c

08004b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b26:	f000 faff 	bl	8005128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <xTimerCreateTimerTask+0x80>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d021      	beq.n	8004b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	f107 0108 	add.w	r1, r7, #8
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fb61 	bl	800320c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	9202      	str	r2, [sp, #8]
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2302      	movs	r3, #2
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	4910      	ldr	r1, [pc, #64]	; (8004ba0 <xTimerCreateTimerTask+0x84>)
 8004b5e:	4811      	ldr	r0, [pc, #68]	; (8004ba4 <xTimerCreateTimerTask+0x88>)
 8004b60:	f7ff f8f6 	bl	8003d50 <xTaskCreateStatic>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b10      	ldr	r3, [pc, #64]	; (8004ba8 <xTimerCreateTimerTask+0x8c>)
 8004b68:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <xTimerCreateTimerTask+0x8c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b72:	2301      	movs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <xTimerCreateTimerTask+0x74>
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	e7fe      	b.n	8004b8e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004b90:	697b      	ldr	r3, [r7, #20]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000e68 	.word	0x20000e68
 8004ba0:	08005b78 	.word	0x08005b78
 8004ba4:	08004cdd 	.word	0x08004cdd
 8004ba8:	20000e6c 	.word	0x20000e6c

08004bac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <xTimerGenericCommand+0x2c>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	e7fe      	b.n	8004bd6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <xTimerGenericCommand+0x94>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02a      	beq.n	8004c36 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	dc18      	bgt.n	8004c24 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bf2:	f7ff feb5 	bl	8004960 <xTaskGetSchedulerState>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d109      	bne.n	8004c10 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bfc:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <xTimerGenericCommand+0x94>)
 8004bfe:	6818      	ldr	r0, [r3, #0]
 8004c00:	f107 0110 	add.w	r1, r7, #16
 8004c04:	2300      	movs	r3, #0
 8004c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c08:	f7fe fccc 	bl	80035a4 <xQueueGenericSend>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24
 8004c0e:	e012      	b.n	8004c36 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <xTimerGenericCommand+0x94>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	f107 0110 	add.w	r1, r7, #16
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f7fe fcc2 	bl	80035a4 <xQueueGenericSend>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24
 8004c22:	e008      	b.n	8004c36 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <xTimerGenericCommand+0x94>)
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	f107 0110 	add.w	r1, r7, #16
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	f7fe fdb2 	bl	8003798 <xQueueGenericSendFromISR>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3728      	adds	r7, #40	; 0x28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000e68 	.word	0x20000e68

08004c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <prvProcessExpiredTimer+0x94>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fb79 	bl	8003354 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d021      	beq.n	8004cb4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	18d1      	adds	r1, r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	6978      	ldr	r0, [r7, #20]
 8004c7e:	f000 f8d1 	bl	8004e24 <prvInsertTimerInActiveList>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01e      	beq.n	8004cc6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	2100      	movs	r1, #0
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	f7ff ff8a 	bl	8004bac <xTimerGenericCommand>
 8004c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d112      	bne.n	8004cc6 <prvProcessExpiredTimer+0x82>
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	e7fe      	b.n	8004cb2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	4798      	blx	r3
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000e60 	.word	0x20000e60

08004cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f857 	bl	8004d9c <prvGetNextExpireTime>
 8004cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f803 	bl	8004d00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cfa:	f000 f8d5 	bl	8004ea8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cfe:	e7f1      	b.n	8004ce4 <prvTimerTask+0x8>

08004d00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d0a:	f7ff fa57 	bl	80041bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d0e:	f107 0308 	add.w	r3, r7, #8
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f866 	bl	8004de4 <prvSampleTimeNow>
 8004d18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d130      	bne.n	8004d82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <prvProcessTimerOrBlockTask+0x3c>
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d806      	bhi.n	8004d3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d2e:	f7ff fa53 	bl	80041d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff85 	bl	8004c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d3a:	e024      	b.n	8004d86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d42:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <prvProcessTimerOrBlockTask+0x90>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <prvProcessTimerOrBlockTask+0x50>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <prvProcessTimerOrBlockTask+0x52>
 8004d50:	2300      	movs	r3, #0
 8004d52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <prvProcessTimerOrBlockTask+0x94>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fe ffc1 	bl	8003ce8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d66:	f7ff fa37 	bl	80041d8 <xTaskResumeAll>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <prvProcessTimerOrBlockTask+0x98>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
}
 8004d80:	e001      	b.n	8004d86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d82:	f7ff fa29 	bl	80041d8 <xTaskResumeAll>
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000e64 	.word	0x20000e64
 8004d94:	20000e68 	.word	0x20000e68
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <prvGetNextExpireTime+0x44>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <prvGetNextExpireTime+0x16>
 8004dae:	2201      	movs	r2, #1
 8004db0:	e000      	b.n	8004db4 <prvGetNextExpireTime+0x18>
 8004db2:	2200      	movs	r2, #0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <prvGetNextExpireTime+0x44>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e001      	b.n	8004dd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000e60 	.word	0x20000e60

08004de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004dec:	f7ff fa90 	bl	8004310 <xTaskGetTickCount>
 8004df0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <prvSampleTimeNow+0x3c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d205      	bcs.n	8004e08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004dfc:	f000 f930 	bl	8005060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e002      	b.n	8004e0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e0e:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <prvSampleTimeNow+0x3c>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000e70 	.word	0x20000e70

08004e24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d812      	bhi.n	8004e70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d302      	bcc.n	8004e5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e01b      	b.n	8004e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <prvInsertTimerInActiveList+0x7c>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f7fe fa3a 	bl	80032e2 <vListInsert>
 8004e6e:	e012      	b.n	8004e96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d206      	bcs.n	8004e86 <prvInsertTimerInActiveList+0x62>
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	e007      	b.n	8004e96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <prvInsertTimerInActiveList+0x80>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f7fe fa26 	bl	80032e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e96:	697b      	ldr	r3, [r7, #20]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000e64 	.word	0x20000e64
 8004ea4:	20000e60 	.word	0x20000e60

08004ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eae:	e0c6      	b.n	800503e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	da17      	bge.n	8004ee6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	3304      	adds	r3, #4
 8004eba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <prvProcessReceivedCommands+0x2e>
 8004ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e7fe      	b.n	8004ed4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004edc:	6850      	ldr	r0, [r2, #4]
 8004ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee0:	6892      	ldr	r2, [r2, #8]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f2c0 80a7 	blt.w	800503c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	3304      	adds	r3, #4
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fa28 	bl	8003354 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f04:	463b      	mov	r3, r7
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff ff6c 	bl	8004de4 <prvSampleTimeNow>
 8004f0c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b09      	cmp	r3, #9
 8004f12:	f200 8094 	bhi.w	800503e <prvProcessReceivedCommands+0x196>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <prvProcessReceivedCommands+0x74>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f45 	.word	0x08004f45
 8004f24:	08004f45 	.word	0x08004f45
 8004f28:	08004fb7 	.word	0x08004fb7
 8004f2c:	08004fcb 	.word	0x08004fcb
 8004f30:	08005013 	.word	0x08005013
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f45 	.word	0x08004f45
 8004f3c:	08004fb7 	.word	0x08004fb7
 8004f40:	08004fcb 	.word	0x08004fcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	18d1      	adds	r1, r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f64:	f7ff ff5e 	bl	8004e24 <prvInsertTimerInActiveList>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d067      	beq.n	800503e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05c      	beq.n	800503e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	441a      	add	r2, r3
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	2300      	movs	r3, #0
 8004f92:	2100      	movs	r1, #0
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	f7ff fe09 	bl	8004bac <xTimerGenericCommand>
 8004f9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d14d      	bne.n	800503e <prvProcessReceivedCommands+0x196>
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	e7fe      	b.n	8004fb4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004fc8:	e039      	b.n	800503e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <prvProcessReceivedCommands+0x156>
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e7fe      	b.n	8004ffc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	699a      	ldr	r2, [r3, #24]
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	18d1      	adds	r1, r2, r3
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800500c:	f7ff ff0a 	bl	8004e24 <prvInsertTimerInActiveList>
					break;
 8005010:	e015      	b.n	800503e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005022:	f000 fbc7 	bl	80057b4 <vPortFree>
 8005026:	e00a      	b.n	800503e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800503a:	e000      	b.n	800503e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800503c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <prvProcessReceivedCommands+0x1b4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	1d39      	adds	r1, r7, #4
 8005044:	2200      	movs	r2, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f7fe fc3a 	bl	80038c0 <xQueueReceive>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	f47f af2e 	bne.w	8004eb0 <prvProcessReceivedCommands+0x8>
	}
}
 8005054:	bf00      	nop
 8005056:	3730      	adds	r7, #48	; 0x30
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	20000e68 	.word	0x20000e68

08005060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005066:	e047      	b.n	80050f8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005068:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <prvSwitchTimerLists+0xc0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <prvSwitchTimerLists+0xc0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3304      	adds	r3, #4
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe f967 	bl	8003354 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02d      	beq.n	80050f8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90e      	bls.n	80050cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ba:	4b19      	ldr	r3, [pc, #100]	; (8005120 <prvSwitchTimerLists+0xc0>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f7fe f90c 	bl	80032e2 <vListInsert>
 80050ca:	e015      	b.n	80050f8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050cc:	2300      	movs	r3, #0
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	2300      	movs	r3, #0
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	2100      	movs	r1, #0
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f7ff fd68 	bl	8004bac <xTimerGenericCommand>
 80050dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <prvSwitchTimerLists+0x98>
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	e7fe      	b.n	80050f6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <prvSwitchTimerLists+0xc0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1b2      	bne.n	8005068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <prvSwitchTimerLists+0xc0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <prvSwitchTimerLists+0xc4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a04      	ldr	r2, [pc, #16]	; (8005120 <prvSwitchTimerLists+0xc0>)
 800510e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <prvSwitchTimerLists+0xc4>)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6013      	str	r3, [r2, #0]
}
 8005116:	bf00      	nop
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000e60 	.word	0x20000e60
 8005124:	20000e64 	.word	0x20000e64

08005128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800512e:	f000 f965 	bl	80053fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <prvCheckForValidListAndQueue+0x60>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d120      	bne.n	800517c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800513a:	4814      	ldr	r0, [pc, #80]	; (800518c <prvCheckForValidListAndQueue+0x64>)
 800513c:	f7fe f880 	bl	8003240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005140:	4813      	ldr	r0, [pc, #76]	; (8005190 <prvCheckForValidListAndQueue+0x68>)
 8005142:	f7fe f87d 	bl	8003240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <prvCheckForValidListAndQueue+0x6c>)
 8005148:	4a10      	ldr	r2, [pc, #64]	; (800518c <prvCheckForValidListAndQueue+0x64>)
 800514a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <prvCheckForValidListAndQueue+0x70>)
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <prvCheckForValidListAndQueue+0x68>)
 8005150:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005152:	2300      	movs	r3, #0
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <prvCheckForValidListAndQueue+0x74>)
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <prvCheckForValidListAndQueue+0x78>)
 800515a:	2110      	movs	r1, #16
 800515c:	200a      	movs	r0, #10
 800515e:	f7fe f98b 	bl	8003478 <xQueueGenericCreateStatic>
 8005162:	4602      	mov	r2, r0
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <prvCheckForValidListAndQueue+0x60>)
 8005166:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005168:	4b07      	ldr	r3, [pc, #28]	; (8005188 <prvCheckForValidListAndQueue+0x60>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005170:	4b05      	ldr	r3, [pc, #20]	; (8005188 <prvCheckForValidListAndQueue+0x60>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	490b      	ldr	r1, [pc, #44]	; (80051a4 <prvCheckForValidListAndQueue+0x7c>)
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fd8e 	bl	8003c98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800517c:	f000 f96c 	bl	8005458 <vPortExitCritical>
}
 8005180:	bf00      	nop
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000e68 	.word	0x20000e68
 800518c:	20000e38 	.word	0x20000e38
 8005190:	20000e4c 	.word	0x20000e4c
 8005194:	20000e60 	.word	0x20000e60
 8005198:	20000e64 	.word	0x20000e64
 800519c:	20000f14 	.word	0x20000f14
 80051a0:	20000e74 	.word	0x20000e74
 80051a4:	08005b80 	.word	0x08005b80

080051a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3b04      	subs	r3, #4
 80051b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3b04      	subs	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3b04      	subs	r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051d8:	4a0c      	ldr	r2, [pc, #48]	; (800520c <pxPortInitialiseStack+0x64>)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3b14      	subs	r3, #20
 80051e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3b04      	subs	r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f06f 0202 	mvn.w	r2, #2
 80051f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b20      	subs	r3, #32
 80051fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	08005211 	.word	0x08005211

08005210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <prvTaskExitError+0x50>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005222:	d009      	beq.n	8005238 <prvTaskExitError+0x28>
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	e7fe      	b.n	8005236 <prvTaskExitError+0x26>
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800524a:	bf00      	nop
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0fc      	beq.n	800524c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	2000009c 	.word	0x2000009c
	...

08005270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005270:	4b07      	ldr	r3, [pc, #28]	; (8005290 <pxCurrentTCBConst2>)
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	6808      	ldr	r0, [r1, #0]
 8005276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	f380 8809 	msr	PSP, r0
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8811 	msr	BASEPRI, r0
 800528a:	4770      	bx	lr
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst2>:
 8005290:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005298:	4808      	ldr	r0, [pc, #32]	; (80052bc <prvPortStartFirstTask+0x24>)
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	6800      	ldr	r0, [r0, #0]
 800529e:	f380 8808 	msr	MSP, r0
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8814 	msr	CONTROL, r0
 80052aa:	b662      	cpsie	i
 80052ac:	b661      	cpsie	f
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	df00      	svc	0
 80052b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ba:	bf00      	nop
 80052bc:	e000ed08 	.word	0xe000ed08

080052c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052c6:	4b44      	ldr	r3, [pc, #272]	; (80053d8 <xPortStartScheduler+0x118>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a44      	ldr	r2, [pc, #272]	; (80053dc <xPortStartScheduler+0x11c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d109      	bne.n	80052e4 <xPortStartScheduler+0x24>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e7fe      	b.n	80052e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052e4:	4b3c      	ldr	r3, [pc, #240]	; (80053d8 <xPortStartScheduler+0x118>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3d      	ldr	r2, [pc, #244]	; (80053e0 <xPortStartScheduler+0x120>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d109      	bne.n	8005302 <xPortStartScheduler+0x42>
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e7fe      	b.n	8005300 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005302:	4b38      	ldr	r3, [pc, #224]	; (80053e4 <xPortStartScheduler+0x124>)
 8005304:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	22ff      	movs	r2, #255	; 0xff
 8005312:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005324:	b2da      	uxtb	r2, r3
 8005326:	4b30      	ldr	r3, [pc, #192]	; (80053e8 <xPortStartScheduler+0x128>)
 8005328:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800532a:	4b30      	ldr	r3, [pc, #192]	; (80053ec <xPortStartScheduler+0x12c>)
 800532c:	2207      	movs	r2, #7
 800532e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005330:	e009      	b.n	8005346 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005332:	4b2e      	ldr	r3, [pc, #184]	; (80053ec <xPortStartScheduler+0x12c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3b01      	subs	r3, #1
 8005338:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <xPortStartScheduler+0x12c>)
 800533a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d0ef      	beq.n	8005332 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <xPortStartScheduler+0x12c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f1c3 0307 	rsb	r3, r3, #7
 800535a:	2b04      	cmp	r3, #4
 800535c:	d009      	beq.n	8005372 <xPortStartScheduler+0xb2>
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	e7fe      	b.n	8005370 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <xPortStartScheduler+0x12c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <xPortStartScheduler+0x12c>)
 800537a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <xPortStartScheduler+0x12c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <xPortStartScheduler+0x12c>)
 8005386:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005390:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <xPortStartScheduler+0x130>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <xPortStartScheduler+0x130>)
 8005396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800539a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800539c:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <xPortStartScheduler+0x130>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <xPortStartScheduler+0x130>)
 80053a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053a8:	f000 f8d6 	bl	8005558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053ac:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <xPortStartScheduler+0x134>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053b2:	f000 f8f5 	bl	80055a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <xPortStartScheduler+0x138>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a0f      	ldr	r2, [pc, #60]	; (80053f8 <xPortStartScheduler+0x138>)
 80053bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053c2:	f7ff ff69 	bl	8005298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053c6:	f7ff f86b 	bl	80044a0 <vTaskSwitchContext>
	prvTaskExitError();
 80053ca:	f7ff ff21 	bl	8005210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	e000ed00 	.word	0xe000ed00
 80053dc:	410fc271 	.word	0x410fc271
 80053e0:	410fc270 	.word	0x410fc270
 80053e4:	e000e400 	.word	0xe000e400
 80053e8:	20000f64 	.word	0x20000f64
 80053ec:	20000f68 	.word	0x20000f68
 80053f0:	e000ed20 	.word	0xe000ed20
 80053f4:	2000009c 	.word	0x2000009c
 80053f8:	e000ef34 	.word	0xe000ef34

080053fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <vPortEnterCritical+0x54>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <vPortEnterCritical+0x54>)
 800541c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800541e:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <vPortEnterCritical+0x54>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d10e      	bne.n	8005444 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <vPortEnterCritical+0x58>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <vPortEnterCritical+0x48>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	603b      	str	r3, [r7, #0]
 8005442:	e7fe      	b.n	8005442 <vPortEnterCritical+0x46>
	}
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	2000009c 	.word	0x2000009c
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <vPortExitCritical+0x4c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <vPortExitCritical+0x22>
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	e7fe      	b.n	8005478 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <vPortExitCritical+0x4c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3b01      	subs	r3, #1
 8005480:	4a08      	ldr	r2, [pc, #32]	; (80054a4 <vPortExitCritical+0x4c>)
 8005482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <vPortExitCritical+0x4c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <vPortExitCritical+0x3e>
 800548c:	2300      	movs	r3, #0
 800548e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	2000009c 	.word	0x2000009c
	...

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f01e 0f10 	tst.w	lr, #16
 80054c0:	bf08      	it	eq
 80054c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054d4:	f380 8811 	msr	BASEPRI, r0
 80054d8:	f3bf 8f4f 	dsb	sy
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f7fe ffde 	bl	80044a0 <vTaskSwitchContext>
 80054e4:	f04f 0000 	mov.w	r0, #0
 80054e8:	f380 8811 	msr	BASEPRI, r0
 80054ec:	bc09      	pop	{r0, r3}
 80054ee:	6819      	ldr	r1, [r3, #0]
 80054f0:	6808      	ldr	r0, [r1, #0]
 80054f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f6:	f01e 0f10 	tst.w	lr, #16
 80054fa:	bf08      	it	eq
 80054fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005500:	f380 8809 	msr	PSP, r0
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst>:
 8005510:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005530:	f7fe fefe 	bl	8004330 <xTaskIncrementTick>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <xPortSysTickHandler+0x3c>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <vPortSetupTimerInterrupt+0x34>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <vPortSetupTimerInterrupt+0x38>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005568:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <vPortSetupTimerInterrupt+0x3c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <vPortSetupTimerInterrupt+0x40>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	099b      	lsrs	r3, r3, #6
 8005574:	4a09      	ldr	r2, [pc, #36]	; (800559c <vPortSetupTimerInterrupt+0x44>)
 8005576:	3b01      	subs	r3, #1
 8005578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800557a:	4b04      	ldr	r3, [pc, #16]	; (800558c <vPortSetupTimerInterrupt+0x34>)
 800557c:	2207      	movs	r2, #7
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	e000e010 	.word	0xe000e010
 8005590:	e000e018 	.word	0xe000e018
 8005594:	20000000 	.word	0x20000000
 8005598:	10624dd3 	.word	0x10624dd3
 800559c:	e000e014 	.word	0xe000e014

080055a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055b0 <vPortEnableVFP+0x10>
 80055a4:	6801      	ldr	r1, [r0, #0]
 80055a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055aa:	6001      	str	r1, [r0, #0]
 80055ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055ae:	bf00      	nop
 80055b0:	e000ed88 	.word	0xe000ed88

080055b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055ba:	f3ef 8305 	mrs	r3, IPSR
 80055be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b0f      	cmp	r3, #15
 80055c4:	d913      	bls.n	80055ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055c6:	4a16      	ldr	r2, [pc, #88]	; (8005620 <vPortValidateInterruptPriority+0x6c>)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <vPortValidateInterruptPriority+0x70>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	7afa      	ldrb	r2, [r7, #11]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d209      	bcs.n	80055ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	e7fe      	b.n	80055ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055ee:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <vPortValidateInterruptPriority+0x74>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <vPortValidateInterruptPriority+0x78>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d909      	bls.n	8005612 <vPortValidateInterruptPriority+0x5e>
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	e7fe      	b.n	8005610 <vPortValidateInterruptPriority+0x5c>
	}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	e000e3f0 	.word	0xe000e3f0
 8005624:	20000f64 	.word	0x20000f64
 8005628:	e000ed0c 	.word	0xe000ed0c
 800562c:	20000f68 	.word	0x20000f68

08005630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800563c:	f7fe fdbe 	bl	80041bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005640:	4b57      	ldr	r3, [pc, #348]	; (80057a0 <pvPortMalloc+0x170>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005648:	f000 f90c 	bl	8005864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800564c:	4b55      	ldr	r3, [pc, #340]	; (80057a4 <pvPortMalloc+0x174>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	f040 808c 	bne.w	8005772 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01c      	beq.n	800569a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005660:	2208      	movs	r2, #8
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	2b00      	cmp	r3, #0
 8005670:	d013      	beq.n	800569a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f023 0307 	bic.w	r3, r3, #7
 8005678:	3308      	adds	r3, #8
 800567a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <pvPortMalloc+0x6a>
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e7fe      	b.n	8005698 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d068      	beq.n	8005772 <pvPortMalloc+0x142>
 80056a0:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <pvPortMalloc+0x178>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d863      	bhi.n	8005772 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056aa:	4b40      	ldr	r3, [pc, #256]	; (80057ac <pvPortMalloc+0x17c>)
 80056ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056ae:	4b3f      	ldr	r3, [pc, #252]	; (80057ac <pvPortMalloc+0x17c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056b4:	e004      	b.n	80056c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d903      	bls.n	80056d2 <pvPortMalloc+0xa2>
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f1      	bne.n	80056b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <pvPortMalloc+0x170>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	429a      	cmp	r2, r3
 80056da:	d04a      	beq.n	8005772 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2208      	movs	r2, #8
 80056e2:	4413      	add	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	2308      	movs	r3, #8
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d91e      	bls.n	800573c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <pvPortMalloc+0xf4>
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e7fe      	b.n	8005722 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005736:	69b8      	ldr	r0, [r7, #24]
 8005738:	f000 f8f6 	bl	8005928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800573c:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <pvPortMalloc+0x178>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	4a18      	ldr	r2, [pc, #96]	; (80057a8 <pvPortMalloc+0x178>)
 8005748:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800574a:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <pvPortMalloc+0x178>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <pvPortMalloc+0x180>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d203      	bcs.n	800575e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <pvPortMalloc+0x178>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <pvPortMalloc+0x180>)
 800575c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <pvPortMalloc+0x174>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	431a      	orrs	r2, r3
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005772:	f7fe fd31 	bl	80041d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <pvPortMalloc+0x164>
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	e7fe      	b.n	8005792 <pvPortMalloc+0x162>
	return pvReturn;
 8005794:	69fb      	ldr	r3, [r7, #28]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3728      	adds	r7, #40	; 0x28
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20004b74 	.word	0x20004b74
 80057a4:	20004b80 	.word	0x20004b80
 80057a8:	20004b78 	.word	0x20004b78
 80057ac:	20004b6c 	.word	0x20004b6c
 80057b0:	20004b7c 	.word	0x20004b7c

080057b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d046      	beq.n	8005854 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057c6:	2308      	movs	r3, #8
 80057c8:	425b      	negs	r3, r3
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4413      	add	r3, r2
 80057ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b20      	ldr	r3, [pc, #128]	; (800585c <vPortFree+0xa8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <vPortFree+0x42>
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e7fe      	b.n	80057f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <vPortFree+0x5e>
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	e7fe      	b.n	8005810 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4b11      	ldr	r3, [pc, #68]	; (800585c <vPortFree+0xa8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	d019      	beq.n	8005854 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d115      	bne.n	8005854 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <vPortFree+0xa8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	43db      	mvns	r3, r3
 8005832:	401a      	ands	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005838:	f7fe fcc0 	bl	80041bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <vPortFree+0xac>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4413      	add	r3, r2
 8005846:	4a06      	ldr	r2, [pc, #24]	; (8005860 <vPortFree+0xac>)
 8005848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800584a:	6938      	ldr	r0, [r7, #16]
 800584c:	f000 f86c 	bl	8005928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005850:	f7fe fcc2 	bl	80041d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005854:	bf00      	nop
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20004b80 	.word	0x20004b80
 8005860:	20004b78 	.word	0x20004b78

08005864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800586a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800586e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <prvHeapInit+0xac>)
 8005872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00c      	beq.n	8005898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3307      	adds	r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0307 	bic.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <prvHeapInit+0xac>)
 8005894:	4413      	add	r3, r2
 8005896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800589c:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <prvHeapInit+0xb0>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058a2:	4b1c      	ldr	r3, [pc, #112]	; (8005914 <prvHeapInit+0xb0>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058b0:	2208      	movs	r2, #8
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <prvHeapInit+0xb4>)
 80058c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <prvHeapInit+0xb4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2200      	movs	r2, #0
 80058cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ce:	4b12      	ldr	r3, [pc, #72]	; (8005918 <prvHeapInit+0xb4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	1ad2      	subs	r2, r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvHeapInit+0xb4>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	; (800591c <prvHeapInit+0xb8>)
 80058f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4a09      	ldr	r2, [pc, #36]	; (8005920 <prvHeapInit+0xbc>)
 80058fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058fc:	4b09      	ldr	r3, [pc, #36]	; (8005924 <prvHeapInit+0xc0>)
 80058fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005902:	601a      	str	r2, [r3, #0]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	20000f6c 	.word	0x20000f6c
 8005914:	20004b6c 	.word	0x20004b6c
 8005918:	20004b74 	.word	0x20004b74
 800591c:	20004b7c 	.word	0x20004b7c
 8005920:	20004b78 	.word	0x20004b78
 8005924:	20004b80 	.word	0x20004b80

08005928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005930:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <prvInsertBlockIntoFreeList+0xac>)
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e002      	b.n	800593c <prvInsertBlockIntoFreeList+0x14>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	429a      	cmp	r2, r3
 8005944:	d8f7      	bhi.n	8005936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4413      	add	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d108      	bne.n	800596a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	441a      	add	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	429a      	cmp	r2, r3
 800597c:	d118      	bne.n	80059b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d00d      	beq.n	80059a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	e008      	b.n	80059b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <prvInsertBlockIntoFreeList+0xb0>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e003      	b.n	80059b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d002      	beq.n	80059c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20004b6c 	.word	0x20004b6c
 80059d8:	20004b74 	.word	0x20004b74

080059dc <__errno>:
 80059dc:	4b01      	ldr	r3, [pc, #4]	; (80059e4 <__errno+0x8>)
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	200000a0 	.word	0x200000a0

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4e0d      	ldr	r6, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1ba4      	subs	r4, r4, r6
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2500      	movs	r5, #0
 80059f4:	42a5      	cmp	r5, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4e0b      	ldr	r6, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f8a0 	bl	8005b40 <_init>
 8005a00:	1ba4      	subs	r4, r4, r6
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2500      	movs	r5, #0
 8005a06:	42a5      	cmp	r5, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a10:	4798      	blx	r3
 8005a12:	3501      	adds	r5, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a1a:	4798      	blx	r3
 8005a1c:	3501      	adds	r5, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005bf0 	.word	0x08005bf0
 8005a24:	08005bf0 	.word	0x08005bf0
 8005a28:	08005bf0 	.word	0x08005bf0
 8005a2c:	08005bf4 	.word	0x08005bf4

08005a30 <malloc>:
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <malloc+0xc>)
 8005a32:	4601      	mov	r1, r0
 8005a34:	6818      	ldr	r0, [r3, #0]
 8005a36:	f000 b817 	b.w	8005a68 <_malloc_r>
 8005a3a:	bf00      	nop
 8005a3c:	200000a0 	.word	0x200000a0

08005a40 <memcpy>:
 8005a40:	b510      	push	{r4, lr}
 8005a42:	1e43      	subs	r3, r0, #1
 8005a44:	440a      	add	r2, r1
 8005a46:	4291      	cmp	r1, r2
 8005a48:	d100      	bne.n	8005a4c <memcpy+0xc>
 8005a4a:	bd10      	pop	{r4, pc}
 8005a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a54:	e7f7      	b.n	8005a46 <memcpy+0x6>

08005a56 <memset>:
 8005a56:	4402      	add	r2, r0
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d100      	bne.n	8005a60 <memset+0xa>
 8005a5e:	4770      	bx	lr
 8005a60:	f803 1b01 	strb.w	r1, [r3], #1
 8005a64:	e7f9      	b.n	8005a5a <memset+0x4>
	...

08005a68 <_malloc_r>:
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	1ccd      	adds	r5, r1, #3
 8005a6c:	f025 0503 	bic.w	r5, r5, #3
 8005a70:	3508      	adds	r5, #8
 8005a72:	2d0c      	cmp	r5, #12
 8005a74:	bf38      	it	cc
 8005a76:	250c      	movcc	r5, #12
 8005a78:	2d00      	cmp	r5, #0
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	db01      	blt.n	8005a82 <_malloc_r+0x1a>
 8005a7e:	42a9      	cmp	r1, r5
 8005a80:	d903      	bls.n	8005a8a <_malloc_r+0x22>
 8005a82:	230c      	movs	r3, #12
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	2000      	movs	r0, #0
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	f000 f857 	bl	8005b3c <__malloc_lock>
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <_malloc_r+0xac>)
 8005a90:	6814      	ldr	r4, [r2, #0]
 8005a92:	4621      	mov	r1, r4
 8005a94:	b991      	cbnz	r1, 8005abc <_malloc_r+0x54>
 8005a96:	4c20      	ldr	r4, [pc, #128]	; (8005b18 <_malloc_r+0xb0>)
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	b91b      	cbnz	r3, 8005aa4 <_malloc_r+0x3c>
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f83d 	bl	8005b1c <_sbrk_r>
 8005aa2:	6020      	str	r0, [r4, #0]
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f000 f838 	bl	8005b1c <_sbrk_r>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d124      	bne.n	8005afa <_malloc_r+0x92>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	f000 f842 	bl	8005b3e <__malloc_unlock>
 8005aba:	e7e4      	b.n	8005a86 <_malloc_r+0x1e>
 8005abc:	680b      	ldr	r3, [r1, #0]
 8005abe:	1b5b      	subs	r3, r3, r5
 8005ac0:	d418      	bmi.n	8005af4 <_malloc_r+0x8c>
 8005ac2:	2b0b      	cmp	r3, #11
 8005ac4:	d90f      	bls.n	8005ae6 <_malloc_r+0x7e>
 8005ac6:	600b      	str	r3, [r1, #0]
 8005ac8:	50cd      	str	r5, [r1, r3]
 8005aca:	18cc      	adds	r4, r1, r3
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f836 	bl	8005b3e <__malloc_unlock>
 8005ad2:	f104 000b 	add.w	r0, r4, #11
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	f020 0007 	bic.w	r0, r0, #7
 8005adc:	1ac3      	subs	r3, r0, r3
 8005ade:	d0d3      	beq.n	8005a88 <_malloc_r+0x20>
 8005ae0:	425a      	negs	r2, r3
 8005ae2:	50e2      	str	r2, [r4, r3]
 8005ae4:	e7d0      	b.n	8005a88 <_malloc_r+0x20>
 8005ae6:	428c      	cmp	r4, r1
 8005ae8:	684b      	ldr	r3, [r1, #4]
 8005aea:	bf16      	itet	ne
 8005aec:	6063      	strne	r3, [r4, #4]
 8005aee:	6013      	streq	r3, [r2, #0]
 8005af0:	460c      	movne	r4, r1
 8005af2:	e7eb      	b.n	8005acc <_malloc_r+0x64>
 8005af4:	460c      	mov	r4, r1
 8005af6:	6849      	ldr	r1, [r1, #4]
 8005af8:	e7cc      	b.n	8005a94 <_malloc_r+0x2c>
 8005afa:	1cc4      	adds	r4, r0, #3
 8005afc:	f024 0403 	bic.w	r4, r4, #3
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d005      	beq.n	8005b10 <_malloc_r+0xa8>
 8005b04:	1a21      	subs	r1, r4, r0
 8005b06:	4630      	mov	r0, r6
 8005b08:	f000 f808 	bl	8005b1c <_sbrk_r>
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d0cf      	beq.n	8005ab0 <_malloc_r+0x48>
 8005b10:	6025      	str	r5, [r4, #0]
 8005b12:	e7db      	b.n	8005acc <_malloc_r+0x64>
 8005b14:	20004b84 	.word	0x20004b84
 8005b18:	20004b88 	.word	0x20004b88

08005b1c <_sbrk_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4c06      	ldr	r4, [pc, #24]	; (8005b38 <_sbrk_r+0x1c>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4605      	mov	r5, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	f7fa fea4 	bl	8000874 <_sbrk>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_sbrk_r+0x1a>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_sbrk_r+0x1a>
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20004c18 	.word	0x20004c18

08005b3c <__malloc_lock>:
 8005b3c:	4770      	bx	lr

08005b3e <__malloc_unlock>:
 8005b3e:	4770      	bx	lr

08005b40 <_init>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr

08005b4c <_fini>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr
